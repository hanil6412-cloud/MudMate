
MugMate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080080b4  080080b4  000090b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008178  08008178  0000a19c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008180  08008180  0000a19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008180  08008180  00009180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008184  08008184  00009184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008188  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  080081e4  0000a05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08008284  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000af0  2000019c  08008324  0000a19c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c8c  08008324  0000ac8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a19c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b5b9  00000000  00000000  0000a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003836  00000000  00000000  00025783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001660  00000000  00000000  00028fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001167  00000000  00000000  0002a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b816  00000000  00000000  0002b787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c8e8  00000000  00000000  00056f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107b2f  00000000  00000000  00073885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017b3b4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000063f4  00000000  00000000  0017b3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000047  00000000  00000000  001817ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800809c 	.word	0x0800809c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	0800809c 	.word	0x0800809c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f001 f891 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f81c 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fb36 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 800061c:	f000 fb16 	bl	8000c4c <MX_DMA_Init>
  MX_ETH_Init();
 8000620:	f000 f888 	bl	8000734 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000624:	f000 fab4 	bl	8000b90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000628:	f000 fae2 	bl	8000bf0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800062c:	f000 f8d0 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000630:	f000 f94a 	bl	80008c8 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000634:	f000 f90a 	bl	800084c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000638:	f000 f9f2 	bl	8000a20 <MX_TIM3_Init>
  MX_TIM9_Init();
 800063c:	f000 fa68 	bl	8000b10 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8000640:	f006 fde4 	bl	800720c <apInit>
  apMain();
 8000644:	f006 fdfe 	bl	8007244 <apMain>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	apMain();
 8000648:	f006 fdfc 	bl	8007244 <apMain>
 800064c:	e7fc      	b.n	8000648 <main+0x3c>
	...

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 f89e 	bl	80077a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f002 fbb8 	bl	8002de8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a2b      	ldr	r2, [pc, #172]	@ (800072c <SystemClock_Config+0xdc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b29      	ldr	r3, [pc, #164]	@ (800072c <SystemClock_Config+0xdc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xe0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a26      	ldr	r2, [pc, #152]	@ (8000730 <SystemClock_Config+0xe0>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006c0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ca:	2309      	movs	r3, #9
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fbe6 	bl	8002ea8 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 fbe9 	bl	8000eb8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e6:	f002 fb8f 	bl	8002e08 <HAL_PWREx_EnableOverDrive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f0:	f000 fbe2 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2107      	movs	r1, #7
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fe76 	bl	8003404 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071e:	f000 fbcb 	bl	8000eb8 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_ETH_Init+0x84>)
 800073a:	4a20      	ldr	r2, [pc, #128]	@ (80007bc <MX_ETH_Init+0x88>)
 800073c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_ETH_Init+0x8c>)
 800074c:	22e1      	movs	r2, #225	@ 0xe1
 800074e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_ETH_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_ETH_Init+0x84>)
 8000764:	4a16      	ldr	r2, [pc, #88]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000766:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_ETH_Init+0x84>)
 800076a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800076e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_ETH_Init+0x84>)
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <MX_ETH_Init+0x90>)
 8000774:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_ETH_Init+0x84>)
 8000778:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_ETH_Init+0x94>)
 800077a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ETH_Init+0x84>)
 800077e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000782:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_ETH_Init+0x84>)
 8000786:	f001 fce1 	bl	800214c <HAL_ETH_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 fb92 	bl	8000eb8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000794:	2238      	movs	r2, #56	@ 0x38
 8000796:	2100      	movs	r1, #0
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_ETH_Init+0x98>)
 800079a:	f007 f801 	bl	80077a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_ETH_Init+0x98>)
 80007a0:	2221      	movs	r2, #33	@ 0x21
 80007a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_ETH_Init+0x98>)
 80007a6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_ETH_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	40028000 	.word	0x40028000
 80007c0:	20000a14 	.word	0x20000a14
 80007c4:	200000fc 	.word	0x200000fc
 80007c8:	2000005c 	.word	0x2000005c
 80007cc:	200001b8 	.word	0x200001b8

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_SPI1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000806:	2208      	movs	r2, #8
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x74>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x74>)
 800082a:	2208      	movs	r2, #8
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000830:	f003 fc36 	bl	80040a0 <HAL_SPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fb3d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002a0 	.word	0x200002a0
 8000848:	40013000 	.word	0x40013000

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_SPI2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000860:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000864:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000868:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800087c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000884:	2220      	movs	r2, #32
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <MX_SPI2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_SPI2_Init+0x74>)
 800089c:	2207      	movs	r2, #7
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_SPI2_Init+0x74>)
 80008ae:	f003 fbf7 	bl	80040a0 <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 fafe 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000304 	.word	0x20000304
 80008c4:	40003800 	.word	0x40003800

080008c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09a      	sub	sp, #104	@ 0x68
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	222c      	movs	r2, #44	@ 0x2c
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 ff4c 	bl	80077a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000908:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <MX_TIM1_Init+0x150>)
 800090a:	4a44      	ldr	r2, [pc, #272]	@ (8000a1c <MX_TIM1_Init+0x154>)
 800090c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 800090e:	4b42      	ldr	r3, [pc, #264]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000910:	220a      	movs	r2, #10
 8000912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800091a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <MX_TIM1_Init+0x150>)
 800091c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000920:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000928:	4b3b      	ldr	r3, [pc, #236]	@ (8000a18 <MX_TIM1_Init+0x150>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000934:	4838      	ldr	r0, [pc, #224]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000936:	f003 fc5e 	bl	80041f6 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 faba 	bl	8000eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000948:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800094e:	4619      	mov	r1, r3
 8000950:	4831      	ldr	r0, [pc, #196]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000952:	f004 fa63 	bl	8004e1c <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800095c:	f000 faac 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000960:	482d      	ldr	r0, [pc, #180]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000962:	f003 fc9f 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800096c:	f000 faa4 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000980:	4619      	mov	r1, r3
 8000982:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000984:	f005 f86e 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800098e:	f000 fa93 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000992:	2360      	movs	r3, #96	@ 0x60
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <MX_TIM1_Init+0x150>)
 80009b8:	f004 f91c 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009c2:	f000 fa79 	bl	8000eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM1_Init+0x150>)
 80009fc:	f005 f8c0 	bl	8005b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a06:	f000 fa57 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0a:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM1_Init+0x150>)
 8000a0c:	f000 fc6e 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000a10:	bf00      	nop
 8000a12:	3768      	adds	r7, #104	@ 0x68
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000368 	.word	0x20000368
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a54:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <MX_TIM3_Init+0xec>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2159;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a5a:	f640 026f 	movw	r2, #2159	@ 0x86f
 8000a5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a66:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a74:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a76:	2280      	movs	r2, #128	@ 0x80
 8000a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a7a:	4823      	ldr	r0, [pc, #140]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a7c:	f003 fbbb 	bl	80041f6 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 fa17 	bl	8000eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481c      	ldr	r0, [pc, #112]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a98:	f004 f9c0 	bl	8004e1c <HAL_TIM_ConfigClockSource>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000aa2:	f000 fa09 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa6:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000aa8:	f003 fbfc 	bl	80042a4 <HAL_TIM_PWM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fa01 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4810      	ldr	r0, [pc, #64]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000ac6:	f004 ffcd 	bl	8005a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ad0:	f000 f9f2 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad4:	2360      	movs	r3, #96	@ 0x60
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000aec:	f004 f882 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000af6:	f000 f9df 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000afa:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000afc:	f000 fbf6 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	@ 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200003b4 	.word	0x200003b4
 8000b0c:	40000400 	.word	0x40000400

08000b10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b24:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <MX_TIM9_Init+0x7c>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21599;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b2a:	f245 425f 	movw	r2, #21599	@ 0x545f
 8000b2e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b3c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8000b4a:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b4c:	f003 fd06 	bl	800455c <HAL_TIM_IC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000b56:	f000 f9af 	bl	8000eb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_TIM9_Init+0x78>)
 8000b72:	f003 ffa2 	bl	8004aba <HAL_TIM_IC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM9_Init+0x70>
  {
    Error_Handler();
 8000b7c:	f000 f99c 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000400 	.word	0x20000400
 8000b8c:	40014000 	.word	0x40014000

08000b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	@ (8000bec <MX_USART3_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART3_UART_Init+0x58>)
 8000bd4:	f005 f870 	bl	8005cb8 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 f96b 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000044c 	.word	0x2000044c
 8000bec:	40004800 	.word	0x40004800

08000bf0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2206      	movs	r2, #6
 8000c00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	f001 ff9d 	bl	8002b72 <HAL_PCD_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f93b 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000534 	.word	0x20000534

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f000 febd 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c74:	200c      	movs	r0, #12
 8000c76:	f000 fed6 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a7d      	ldr	r2, [pc, #500]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b7b      	ldr	r3, [pc, #492]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	623b      	str	r3, [r7, #32]
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a77      	ldr	r2, [pc, #476]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b75      	ldr	r3, [pc, #468]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cce:	4b72      	ldr	r3, [pc, #456]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a71      	ldr	r2, [pc, #452]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b6f      	ldr	r3, [pc, #444]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a6b      	ldr	r2, [pc, #428]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b69      	ldr	r3, [pc, #420]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a65      	ldr	r2, [pc, #404]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b60      	ldr	r3, [pc, #384]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b5d      	ldr	r3, [pc, #372]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a59      	ldr	r2, [pc, #356]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b57      	ldr	r3, [pc, #348]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b54      	ldr	r3, [pc, #336]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b51      	ldr	r3, [pc, #324]	@ (8000e98 <MX_GPIO_Init+0x210>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_OUTPUT_GPIO_Port, SPI1_OUTPUT_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2110      	movs	r1, #16
 8000d62:	484e      	ldr	r0, [pc, #312]	@ (8000e9c <MX_GPIO_Init+0x214>)
 8000d64:	f001 feec 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d6e:	484c      	ldr	r0, [pc, #304]	@ (8000ea0 <MX_GPIO_Init+0x218>)
 8000d70:	f001 fee6 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, TOUCH_CH1_LED_Pin|USB_PowerSwitchOn_Pin|TOUCH_CH3_LED_Pin|TOUCH_CH4_LED_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f241 2141 	movw	r1, #4673	@ 0x1241
 8000d7a:	484a      	ldr	r0, [pc, #296]	@ (8000ea4 <MX_GPIO_Init+0x21c>)
 8000d7c:	f001 fee0 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_Pin|TOUCH_CH2_LED_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d86:	4848      	ldr	r0, [pc, #288]	@ (8000ea8 <MX_GPIO_Init+0x220>)
 8000d88:	f001 feda 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_DC_Pin|LCD_CS_Pin|LCD_RES_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000d92:	4846      	ldr	r0, [pc, #280]	@ (8000eac <MX_GPIO_Init+0x224>)
 8000d94:	f001 fed4 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4840      	ldr	r0, [pc, #256]	@ (8000eb0 <MX_GPIO_Init+0x228>)
 8000db0:	f001 fd1a 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CH2_Pin TOUCH_1CH_Pin */
  GPIO_InitStruct.Pin = TOUCH_CH2_Pin|TOUCH_1CH_Pin;
 8000db4:	2303      	movs	r3, #3
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	483b      	ldr	r0, [pc, #236]	@ (8000eb4 <MX_GPIO_Init+0x22c>)
 8000dc8:	f001 fd0e 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_OUTPUT_Pin */
  GPIO_InitStruct.Pin = SPI1_OUTPUT_Pin;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI1_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	482e      	ldr	r0, [pc, #184]	@ (8000e9c <MX_GPIO_Init+0x214>)
 8000de4:	f001 fd00 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000de8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <MX_GPIO_Init+0x218>)
 8000e02:	f001 fcf1 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CH1_LED_Pin USB_PowerSwitchOn_Pin TOUCH_CH3_LED_Pin TOUCH_CH4_LED_Pin */
  GPIO_InitStruct.Pin = TOUCH_CH1_LED_Pin|USB_PowerSwitchOn_Pin|TOUCH_CH3_LED_Pin|TOUCH_CH4_LED_Pin;
 8000e06:	f241 2341 	movw	r3, #4673	@ 0x1241
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4821      	ldr	r0, [pc, #132]	@ (8000ea4 <MX_GPIO_Init+0x21c>)
 8000e20:	f001 fce2 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin TOUCH_CH2_LED_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|TOUCH_CH2_LED_Pin;
 8000e24:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481a      	ldr	r0, [pc, #104]	@ (8000ea8 <MX_GPIO_Init+0x220>)
 8000e3e:	f001 fcd3 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RES_Pin;
 8000e42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	@ (8000eac <MX_GPIO_Init+0x224>)
 8000e5c:	f001 fcc4 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <MX_GPIO_Init+0x21c>)
 8000e74:	f001 fcb8 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CH4_Pin TOUCH_CH3_Pin */
  GPIO_InitStruct.Pin = TOUCH_CH4_Pin|TOUCH_CH3_Pin;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MX_GPIO_Init+0x224>)
 8000e8c:	f001 fcac 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3738      	adds	r7, #56	@ 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40021400 	.word	0x40021400

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x44>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	@ (8001064 <HAL_ETH_MspInit+0x158>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	f040 8096 	bne.w	800105c <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f30:	4b4d      	ldr	r3, [pc, #308]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	623b      	str	r3, [r7, #32]
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	4b47      	ldr	r3, [pc, #284]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	4a46      	ldr	r2, [pc, #280]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f54:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4a40      	ldr	r2, [pc, #256]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a34      	ldr	r2, [pc, #208]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9c:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a2e      	ldr	r2, [pc, #184]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd8:	2332      	movs	r3, #50	@ 0x32
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe8:	230b      	movs	r3, #11
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481e      	ldr	r0, [pc, #120]	@ (800106c <HAL_ETH_MspInit+0x160>)
 8000ff4:	f001 fbf8 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ff8:	2386      	movs	r3, #134	@ 0x86
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4817      	ldr	r0, [pc, #92]	@ (8001070 <HAL_ETH_MspInit+0x164>)
 8001014:	f001 fbe8 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	480f      	ldr	r0, [pc, #60]	@ (8001074 <HAL_ETH_MspInit+0x168>)
 8001036:	f001 fbd7 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800103a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <HAL_ETH_MspInit+0x16c>)
 8001058:	f001 fbc6 	bl	80027e8 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	@ 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40028000 	.word	0x40028000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020800 	.word	0x40020800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40021800 	.word	0x40021800

0800107c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	@ 0x38
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a4a      	ldr	r2, [pc, #296]	@ (80011c4 <HAL_SPI_MspInit+0x148>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d144      	bne.n	8001128 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109e:	4b4a      	ldr	r3, [pc, #296]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a43      	ldr	r2, [pc, #268]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a3d      	ldr	r2, [pc, #244]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010e6:	2360      	movs	r3, #96	@ 0x60
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f6:	2305      	movs	r3, #5
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	4832      	ldr	r0, [pc, #200]	@ (80011cc <HAL_SPI_MspInit+0x150>)
 8001102:	f001 fb71 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001106:	2380      	movs	r3, #128	@ 0x80
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001116:	2305      	movs	r3, #5
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	482b      	ldr	r0, [pc, #172]	@ (80011d0 <HAL_SPI_MspInit+0x154>)
 8001122:	f001 fb61 	bl	80027e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001126:	e049      	b.n	80011bc <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a29      	ldr	r2, [pc, #164]	@ (80011d4 <HAL_SPI_MspInit+0x158>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d144      	bne.n	80011bc <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a24      	ldr	r2, [pc, #144]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_SPI_MspInit+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117a:	2308      	movs	r3, #8
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118a:	2305      	movs	r3, #5
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4810      	ldr	r0, [pc, #64]	@ (80011d8 <HAL_SPI_MspInit+0x15c>)
 8001196:	f001 fb27 	bl	80027e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800119a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ac:	2305      	movs	r3, #5
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4809      	ldr	r0, [pc, #36]	@ (80011dc <HAL_SPI_MspInit+0x160>)
 80011b8:	f001 fb16 	bl	80027e8 <HAL_GPIO_Init>
}
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	@ 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40013000 	.word	0x40013000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020400 	.word	0x40020400

080011e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <HAL_TIM_Base_MspInit+0x68>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d114      	bne.n	800121c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2018      	movs	r0, #24
 8001210:	f000 fbed 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001214:	2018      	movs	r0, #24
 8001216:	f000 fc06 	bl	8001a26 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800121a:	e010      	b.n	800123e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_TIM_Base_MspInit+0x70>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_TIM_Base_MspInit+0x6c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000
 800124c:	40023800 	.word	0x40023800
 8001250:	40000400 	.word	0x40000400

08001254 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM9)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1b      	ldr	r2, [pc, #108]	@ (80012e0 <HAL_TIM_IC_MspInit+0x8c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12f      	bne.n	80012d6 <HAL_TIM_IC_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a14      	ldr	r2, [pc, #80]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_TIM_IC_MspInit+0x90>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012a6:	2320      	movs	r3, #32
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	2312      	movs	r3, #18
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80012b6:	2303      	movs	r3, #3
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <HAL_TIM_IC_MspInit+0x94>)
 80012c2:	f001 fa91 	bl	80027e8 <HAL_GPIO_Init>

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2018      	movs	r0, #24
 80012cc:	f000 fb8f 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80012d0:	2018      	movs	r0, #24
 80012d2:	f000 fba8 	bl	8001a26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40014000 	.word	0x40014000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <HAL_TIM_MspPostInit+0xa8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11d      	bne.n	800134a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4816      	ldr	r0, [pc, #88]	@ (800139c <HAL_TIM_MspPostInit+0xb0>)
 8001344:	f001 fa50 	bl	80027e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001348:	e020      	b.n	800138c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_TIM_MspPostInit+0xb4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d11b      	bne.n	800138c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001360:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_TIM_MspPostInit+0xac>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800136c:	2340      	movs	r3, #64	@ 0x40
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137c:	2302      	movs	r3, #2
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <HAL_TIM_MspPostInit+0xb8>)
 8001388:	f001 fa2e 	bl	80027e8 <HAL_GPIO_Init>
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010000 	.word	0x40010000
 8001398:	40023800 	.word	0x40023800
 800139c:	40021000 	.word	0x40021000
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40020800 	.word	0x40020800

080013a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ae      	sub	sp, #184	@ 0xb8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2290      	movs	r2, #144	@ 0x90
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 f9e9 	bl	80077a0 <memset>
  if(huart->Instance==USART3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a3a      	ldr	r2, [pc, #232]	@ (80014bc <HAL_UART_MspInit+0x114>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d16c      	bne.n	80014b2 <HAL_UART_MspInit+0x10a>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013de:	2300      	movs	r3, #0
 80013e0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fa32 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013f2:	f7ff fd61 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a2b      	ldr	r2, [pc, #172]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <HAL_UART_MspInit+0x118>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001426:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800144a:	4619      	mov	r1, r3
 800144c:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <HAL_UART_MspInit+0x11c>)
 800144e:	f001 f9cb 	bl	80027e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001454:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <HAL_UART_MspInit+0x124>)
 8001456:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800145a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800145e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001466:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800146e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001472:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001486:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 800148a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800148e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001496:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 8001498:	f000 fae0 	bl	8001a5c <HAL_DMA_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80014a2:	f7ff fd09 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 80014aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_UART_MspInit+0x120>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80014b2:	bf00      	nop
 80014b4:	37b8      	adds	r7, #184	@ 0xb8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004800 	.word	0x40004800
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	200004d4 	.word	0x200004d4
 80014cc:	40026028 	.word	0x40026028

080014d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ae      	sub	sp, #184	@ 0xb8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2290      	movs	r2, #144	@ 0x90
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 f955 	bl	80077a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fe:	d159      	bne.n	80015b4 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001500:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001504:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f99d 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800151c:	f7ff fccc 	bl	8000eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a25      	ldr	r2, [pc, #148]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001538:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800153c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001552:	230a      	movs	r3, #10
 8001554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800155c:	4619      	mov	r1, r3
 800155e:	4818      	ldr	r0, [pc, #96]	@ (80015c0 <HAL_PCD_MspInit+0xf0>)
 8001560:	f001 f942 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001568:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800157c:	4619      	mov	r1, r3
 800157e:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <HAL_PCD_MspInit+0xf0>)
 8001580:	f001 f932 	bl	80027e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 8001586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 800158a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 8001592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <HAL_PCD_MspInit+0xec>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015b4:	bf00      	nop
 80015b6:	37b8      	adds	r7, #184	@ 0xb8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 f8c9 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Stream1_IRQHandler+0x10>)
 800162a:	f000 fb25 	bl	8001c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200004d4 	.word	0x200004d4

08001638 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800163e:	f003 f935 	bl	80048ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001644:	f003 f932 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000368 	.word	0x20000368
 8001650:	20000400 	.word	0x20000400

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f006 f894 	bl	80077b0 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20080000 	.word	0x20080000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000a1c 	.word	0x20000a1c
 80016bc:	20000c90 	.word	0x20000c90

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001712:	f006 f853 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe ff79 	bl	800060c <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001728:	08008188 	.word	0x08008188
  ldr r2, =_sbss
 800172c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001730:	20000c8c 	.word	0x20000c8c

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>

08001736 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f94c 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f805 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001746:	f7ff fbbd 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000a20 	.word	0x20000a20

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000a20 	.word	0x20000a20

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <__NVIC_SetPriorityGrouping+0x40>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	4313      	orrs	r3, r2
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x40>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	05fa0000 	.word	0x05fa0000

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff feb6 	bl	80017d8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fe9d 	bl	80017d8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fa77 	bl	8002054 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa2e 	bl	8001fe8 <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	223f      	movs	r2, #63	@ 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	e010803f 	.word	0xe010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e048      	b.n	8001c70 <HAL_DMA_Start_IT+0xb8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d137      	bne.n	8001c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f9c0 	bl	8001f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e005      	b.n	8001c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c84:	4b8e      	ldr	r3, [pc, #568]	@ (8001ec0 <HAL_DMA_IRQHandler+0x248>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec4 <HAL_DMA_IRQHandler+0x24c>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0a9b      	lsrs	r3, r3, #10
 8001c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0204 	bic.w	r2, r2, #4
 8001cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	2201      	movs	r2, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	f043 0202 	orr.w	r2, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	2204      	movs	r2, #4
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d012      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	f043 0204 	orr.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d54:	2210      	movs	r2, #16
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d043      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03c      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	2210      	movs	r2, #16
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d018      	beq.n	8001dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d108      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d024      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
 8001da6:	e01f      	b.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e016      	b.n	8001de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0208 	bic.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2220      	movs	r2, #32
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 808f 	beq.w	8001f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8087 	beq.w	8001f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	2220      	movs	r2, #32
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d136      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0216 	bic.w	r2, r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_DMA_IRQHandler+0x1da>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0208 	bic.w	r2, r2, #8
 8001e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	223f      	movs	r2, #63	@ 0x3f
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d07e      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	4798      	blx	r3
        }
        return;
 8001e8e:	e079      	b.n	8001f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01d      	beq.n	8001eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
 8001ebc:	e02c      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d023      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
 8001ed8:	e01e      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10f      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0210 	bic.w	r2, r2, #16
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d032      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d307      	bcc.n	8001f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f2      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x2cc>
 8001f5e:	e000      	b.n	8001f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
 8001f82:	e000      	b.n	8001f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f84:	bf00      	nop
    }
  }
}
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b40      	cmp	r3, #64	@ 0x40
 8001fb8:	d108      	bne.n	8001fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fca:	e007      	b.n	8001fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	60da      	str	r2, [r3, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3b10      	subs	r3, #16
 8001ff8:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <DMA_CalcBaseAndBitshift+0x60>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <DMA_CalcBaseAndBitshift+0x64>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d908      	bls.n	8002028 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <DMA_CalcBaseAndBitshift+0x68>)
 800201e:	4013      	ands	r3, r2
 8002020:	1d1a      	adds	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58
 8002026:	e006      	b.n	8002036 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	0800813c 	.word	0x0800813c
 8002050:	fffffc00 	.word	0xfffffc00

08002054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11f      	bne.n	80020ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d856      	bhi.n	8002122 <DMA_CheckFifoParam+0xce>
 8002074:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <DMA_CheckFifoParam+0x28>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	0800209f 	.word	0x0800209f
 8002084:	0800208d 	.word	0x0800208d
 8002088:	08002123 	.word	0x08002123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d046      	beq.n	8002126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209c:	e043      	b.n	8002126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020a6:	d140      	bne.n	800212a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e03d      	b.n	800212a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b6:	d121      	bne.n	80020fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d837      	bhi.n	800212e <DMA_CheckFifoParam+0xda>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <DMA_CheckFifoParam+0x70>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020db 	.word	0x080020db
 80020cc:	080020d5 	.word	0x080020d5
 80020d0:	080020ed 	.word	0x080020ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e030      	b.n	800213c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d025      	beq.n	8002132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ea:	e022      	b.n	8002132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f4:	d11f      	bne.n	8002136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fa:	e01c      	b.n	8002136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d903      	bls.n	800210a <DMA_CheckFifoParam+0xb6>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d003      	beq.n	8002110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002108:	e018      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      break;
 800210e:	e015      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e00b      	b.n	800213a <DMA_CheckFifoParam+0xe6>
      break;
 8002122:	bf00      	nop
 8002124:	e00a      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e008      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e006      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e004      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e002      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;   
 8002136:	bf00      	nop
 8002138:	e000      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
    }
  } 
  
  return status; 
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e086      	b.n	800226c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe fecb 	bl	8000f0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <HAL_ETH_Init+0x128>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a3e      	ldr	r2, [pc, #248]	@ (8002274 <HAL_ETH_Init+0x128>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b3c      	ldr	r3, [pc, #240]	@ (8002274 <HAL_ETH_Init+0x128>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800218e:	4b3a      	ldr	r3, [pc, #232]	@ (8002278 <HAL_ETH_Init+0x12c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a39      	ldr	r2, [pc, #228]	@ (8002278 <HAL_ETH_Init+0x12c>)
 8002194:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002198:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800219a:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <HAL_ETH_Init+0x12c>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4935      	ldr	r1, [pc, #212]	@ (8002278 <HAL_ETH_Init+0x12c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_ETH_Init+0x12c>)
 80021aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff fb08 	bl	80017d8 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021ca:	e011      	b.n	80021f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021cc:	f7ff fb04 	bl	80017d8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021da:	d909      	bls.n	80021f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	22e0      	movs	r2, #224	@ 0xe0
 80021e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e03d      	b.n	800226c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e4      	bne.n	80021cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f97a 	bl	80024fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fa25 	bl	8002658 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fa7b 	bl	800270a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	461a      	mov	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9e3 	bl	80025e8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_ETH_Init+0x130>)
 8002240:	430b      	orrs	r3, r1
 8002242:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002256:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2210      	movs	r2, #16
 8002266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	00020060 	.word	0x00020060

08002280 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <ETH_SetMACConfig+0x164>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7b9b      	ldrb	r3, [r3, #14]
 800229e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	7c12      	ldrb	r2, [r2, #16]
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d102      	bne.n	80022ae <ETH_SetMACConfig+0x2e>
 80022a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022ac:	e000      	b.n	80022b0 <ETH_SetMACConfig+0x30>
 80022ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80022b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	7c52      	ldrb	r2, [r2, #17]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d102      	bne.n	80022c0 <ETH_SetMACConfig+0x40>
 80022ba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022be:	e000      	b.n	80022c2 <ETH_SetMACConfig+0x42>
 80022c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	7fdb      	ldrb	r3, [r3, #31]
 80022ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	7f92      	ldrb	r2, [r2, #30]
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d102      	bne.n	80022e6 <ETH_SetMACConfig+0x66>
 80022e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e4:	e000      	b.n	80022e8 <ETH_SetMACConfig+0x68>
 80022e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80022e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	7f1b      	ldrb	r3, [r3, #28]
 80022ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002306:	2a00      	cmp	r2, #0
 8002308:	d102      	bne.n	8002310 <ETH_SetMACConfig+0x90>
 800230a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230e:	e000      	b.n	8002312 <ETH_SetMACConfig+0x92>
 8002310:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002312:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	7bdb      	ldrb	r3, [r3, #15]
 8002318:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800231a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002320:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002328:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800232a:	4313      	orrs	r3, r2
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff fa54 	bl	80017f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002366:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800236e:	2a00      	cmp	r2, #0
 8002370:	d101      	bne.n	8002376 <ETH_SetMACConfig+0xf6>
 8002372:	2280      	movs	r2, #128	@ 0x80
 8002374:	e000      	b.n	8002378 <ETH_SetMACConfig+0xf8>
 8002376:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002378:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800237e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002386:	2a01      	cmp	r2, #1
 8002388:	d101      	bne.n	800238e <ETH_SetMACConfig+0x10e>
 800238a:	2208      	movs	r2, #8
 800238c:	e000      	b.n	8002390 <ETH_SetMACConfig+0x110>
 800238e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002390:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002398:	2a01      	cmp	r2, #1
 800239a:	d101      	bne.n	80023a0 <ETH_SetMACConfig+0x120>
 800239c:	2204      	movs	r2, #4
 800239e:	e000      	b.n	80023a2 <ETH_SetMACConfig+0x122>
 80023a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80023a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80023aa:	2a01      	cmp	r2, #1
 80023ac:	d101      	bne.n	80023b2 <ETH_SetMACConfig+0x132>
 80023ae:	2202      	movs	r2, #2
 80023b0:	e000      	b.n	80023b4 <ETH_SetMACConfig+0x134>
 80023b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023b4:	4313      	orrs	r3, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fa0f 	bl	80017f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	fd20810f 	.word	0xfd20810f

080023e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <ETH_SetDMAConfig+0x110>)
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	7b1b      	ldrb	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <ETH_SetDMAConfig+0x2c>
 800240e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002412:	e000      	b.n	8002416 <ETH_SetDMAConfig+0x2e>
 8002414:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	7b5b      	ldrb	r3, [r3, #13]
 800241a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800241c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	7f52      	ldrb	r2, [r2, #29]
 8002422:	2a00      	cmp	r2, #0
 8002424:	d102      	bne.n	800242c <ETH_SetDMAConfig+0x44>
 8002426:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800242a:	e000      	b.n	800242e <ETH_SetDMAConfig+0x46>
 800242c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800242e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	7b9b      	ldrb	r3, [r3, #14]
 8002434:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002436:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800243c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
 8002442:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002444:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f9b      	ldrb	r3, [r3, #30]
 800244a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800244c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002452:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800245a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800245c:	4313      	orrs	r3, r2
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff f9b6 	bl	80017f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248c:	461a      	mov	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	791b      	ldrb	r3, [r3, #4]
 8002496:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800249c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80024a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80024a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7ff f987 	bl	80017f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	f8de3f23 	.word	0xf8de3f23

080024fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0a6      	sub	sp, #152	@ 0x98
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002510:	2300      	movs	r3, #0
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800253e:	2300      	movs	r3, #0
 8002540:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002548:	2300      	movs	r3, #0
 800254a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800256a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800256e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002576:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fe7f 	bl	8002280 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002582:	2301      	movs	r3, #1
 8002584:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002590:	2301      	movs	r3, #1
 8002592:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025bc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025c2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff05 	bl	80023e8 <ETH_SetDMAConfig>
}
 80025de:	bf00      	nop
 80025e0:	3798      	adds	r7, #152	@ 0x98
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3305      	adds	r3, #5
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	3204      	adds	r2, #4
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <ETH_MACAddressConfig+0x68>)
 800260a:	4413      	add	r3, r2
 800260c:	461a      	mov	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3303      	adds	r3, #3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3302      	adds	r3, #2
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3301      	adds	r3, #1
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	4313      	orrs	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <ETH_MACAddressConfig+0x6c>)
 800263a:	4413      	add	r3, r2
 800263c:	461a      	mov	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40028040 	.word	0x40028040
 8002654:	40028044 	.word	0x40028044

08002658 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e03e      	b.n	80026e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	3206      	adds	r2, #6
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d80c      	bhi.n	80026c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e004      	b.n	80026d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d9bd      	bls.n	8002666 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fc:	611a      	str	r2, [r3, #16]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e048      	b.n	80027aa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002754:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	3212      	adds	r2, #18
 8002776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d80c      	bhi.n	800279a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	461a      	mov	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	e004      	b.n	80027a4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d9b3      	bls.n	8002718 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e175      	b.n	8002af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8164 	bne.w	8002aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x56>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80be 	beq.w	8002aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	4a65      	ldr	r2, [pc, #404]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800297c:	6453      	str	r3, [r2, #68]	@ 0x44
 800297e:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <HAL_GPIO_Init+0x324>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800298a:	4a61      	ldr	r2, [pc, #388]	@ (8002b10 <HAL_GPIO_Init+0x328>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_GPIO_Init+0x32c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d037      	beq.n	8002a26 <HAL_GPIO_Init+0x23e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a57      	ldr	r2, [pc, #348]	@ (8002b18 <HAL_GPIO_Init+0x330>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_GPIO_Init+0x23a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a56      	ldr	r2, [pc, #344]	@ (8002b1c <HAL_GPIO_Init+0x334>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02b      	beq.n	8002a1e <HAL_GPIO_Init+0x236>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a55      	ldr	r2, [pc, #340]	@ (8002b20 <HAL_GPIO_Init+0x338>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x232>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a54      	ldr	r2, [pc, #336]	@ (8002b24 <HAL_GPIO_Init+0x33c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x22e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a53      	ldr	r2, [pc, #332]	@ (8002b28 <HAL_GPIO_Init+0x340>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x22a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_GPIO_Init+0x344>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a51      	ldr	r2, [pc, #324]	@ (8002b30 <HAL_GPIO_Init+0x348>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a50      	ldr	r2, [pc, #320]	@ (8002b34 <HAL_GPIO_Init+0x34c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b38 <HAL_GPIO_Init+0x350>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029fe:	2309      	movs	r3, #9
 8002a00:	e012      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a02:	230a      	movs	r3, #10
 8002a04:	e010      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e00e      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	@ (8002b10 <HAL_GPIO_Init+0x328>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b3d      	ldr	r3, [pc, #244]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a34      	ldr	r2, [pc, #208]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a29      	ldr	r2, [pc, #164]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <HAL_GPIO_Init+0x354>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f ae86 	bls.w	8002808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40021400 	.word	0x40021400
 8002b2c:	40021800 	.word	0x40021800
 8002b30:	40021c00 	.word	0x40021c00
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40022400 	.word	0x40022400
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e108      	b.n	8002d96 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fc96 	bl	80014d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb2:	d102      	bne.n	8002bba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 f888 	bl	8006cd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7c1a      	ldrb	r2, [r3, #16]
 8002bcc:	f88d 2000 	strb.w	r2, [sp]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd4:	f004 f824 	bl	8006c20 <USB_CoreInit>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0d5      	b.n	8002d96 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 f880 	bl	8006cf6 <USB_SetCurrentMode>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0c6      	b.n	8002d96 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e04a      	b.n	8002ca4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3315      	adds	r3, #21
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	3314      	adds	r3, #20
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	b298      	uxth	r0, r3
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	332e      	adds	r3, #46	@ 0x2e
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	331c      	adds	r3, #28
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3320      	adds	r3, #32
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3324      	adds	r3, #36	@ 0x24
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	791b      	ldrb	r3, [r3, #4]
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d3af      	bcc.n	8002c0e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e044      	b.n	8002d3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3b5      	bcc.n	8002cb4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7c1a      	ldrb	r2, [r3, #16]
 8002d50:	f88d 2000 	strb.w	r2, [sp]
 8002d54:	3304      	adds	r3, #4
 8002d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d58:	f004 f81a 	bl	8006d90 <USB_DevInit>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e013      	b.n	8002d96 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b1b      	ldrb	r3, [r3, #12]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f80b 	bl	8002da0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 f9d5 	bl	800713e <USB_DevDisconnect>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	10000003 	.word	0x10000003

08002de8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40007000 	.word	0x40007000

08002e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e36:	f7fe fccf 	bl	80017d8 <HAL_GetTick>
 8002e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e3c:	e009      	b.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e3e:	f7fe fccb 	bl	80017d8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4c:	d901      	bls.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e022      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e52:	4b14      	ldr	r3, [pc, #80]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7fe fcb4 	bl	80017d8 <HAL_GetTick>
 8002e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e72:	e009      	b.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e74:	f7fe fcb0 	bl	80017d8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e82:	d901      	bls.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e007      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e94:	d1ee      	bne.n	8002e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e29b      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8087 	beq.w	8002fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ecc:	4b96      	ldr	r3, [pc, #600]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed8:	4b93      	ldr	r3, [pc, #588]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
 8002ee4:	4b90      	ldr	r3, [pc, #576]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d06c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x130>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d168      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e275      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x7a>
 8002f14:	4b84      	ldr	r3, [pc, #528]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a83      	ldr	r2, [pc, #524]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x9c>
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b7c      	ldr	r3, [pc, #496]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f4e:	4b76      	ldr	r3, [pc, #472]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b73      	ldr	r3, [pc, #460]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a72      	ldr	r2, [pc, #456]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd8>
 8002f68:	4b6f      	ldr	r3, [pc, #444]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b6c      	ldr	r3, [pc, #432]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fc26 	bl	80017d8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fc22 	bl	80017d8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	@ 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e229      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc12 	bl	80017d8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fc0e 	bl	80017d8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e215      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x110>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d069      	beq.n	80030ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe6:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x190>
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x17a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1e9      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	493d      	ldr	r1, [pc, #244]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e040      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d023      	beq.n	8003088 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a38      	ldr	r2, [pc, #224]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fbc4 	bl	80017d8 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fbc0 	bl	80017d8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1c7      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4929      	ldr	r1, [pc, #164]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
 8003086:	e018      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003088:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a26      	ldr	r2, [pc, #152]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fba0 	bl	80017d8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe fb9c 	bl	80017d8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1a3      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d038      	beq.n	8003138 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	4a15      	ldr	r2, [pc, #84]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fb7d 	bl	80017d8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fb79 	bl	80017d8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e180      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x23a>
 8003100:	e01a      	b.n	8003138 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_RCC_OscConfig+0x280>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe fb63 	bl	80017d8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe fb5f 	bl	80017d8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d903      	bls.n	800312c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e166      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
 8003128:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b92      	ldr	r3, [pc, #584]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a4 	beq.w	800328e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b8c      	ldr	r3, [pc, #560]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	4b89      	ldr	r3, [pc, #548]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a88      	ldr	r2, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b86      	ldr	r3, [pc, #536]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	4b83      	ldr	r3, [pc, #524]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800317a:	4b80      	ldr	r3, [pc, #512]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a7f      	ldr	r2, [pc, #508]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe fb27 	bl	80017d8 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe fb23 	bl	80017d8 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	@ 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e12a      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a0:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x4d4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x31a>
 80031b4:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	e02d      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x33c>
 80031ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	e01c      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x35e>
 80031ec:	4b62      	ldr	r3, [pc, #392]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a61      	ldr	r2, [pc, #388]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	@ 0x70
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x376>
 8003206:	4b5c      	ldr	r3, [pc, #368]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a5b      	ldr	r2, [pc, #364]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
 8003212:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d015      	beq.n	8003252 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fe fad7 	bl	80017d8 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fad3 	bl	80017d8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0d8      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	4b4c      	ldr	r3, [pc, #304]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ee      	beq.n	800322e <HAL_RCC_OscConfig+0x386>
 8003250:	e014      	b.n	800327c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fac1 	bl	80017d8 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fabd 	bl	80017d8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0c2      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ee      	bne.n	800325a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	4a3c      	ldr	r2, [pc, #240]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80ae 	beq.w	80033f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003298:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d06d      	beq.n	8003380 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d14b      	bne.n	8003344 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fa8e 	bl	80017d8 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fa8a 	bl	80017d8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e091      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	071b      	lsls	r3, r3, #28
 800330a:	491b      	ldr	r1, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fa5c 	bl	80017d8 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fa58 	bl	80017d8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e05f      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x47c>
 8003342:	e057      	b.n	80033f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800334a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fa42 	bl	80017d8 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe fa3e 	bl	80017d8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e045      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_OscConfig+0x4d0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x4b0>
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x54c>
 8003378:	40023800 	.word	0x40023800
 800337c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003380:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <HAL_RCC_OscConfig+0x558>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d030      	beq.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d129      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d122      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d119      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	3b01      	subs	r3, #1
 80033ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10f      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	4965      	ldr	r1, [pc, #404]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800346e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a52      	ldr	r2, [pc, #328]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fe f96e 	bl	80017d8 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe f96a 	bl	80017d8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	4922      	ldr	r1, [pc, #136]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	@ (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	@ (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_RCC_ClockConfig+0x1d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe f8ca 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023c00 	.word	0x40023c00
 80035cc:	40023800 	.word	0x40023800
 80035d0:	08008124 	.word	0x08008124
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e0:	b094      	sub	sp, #80	@ 0x50
 80035e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e8:	2300      	movs	r3, #0
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ec:	2300      	movs	r3, #0
 80035ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f4:	4b79      	ldr	r3, [pc, #484]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d00d      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x40>
 8003600:	2b08      	cmp	r3, #8
 8003602:	f200 80e1 	bhi.w	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x34>
 800360a:	2b04      	cmp	r3, #4
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x3a>
 800360e:	e0db      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003610:	4b73      	ldr	r3, [pc, #460]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003614:	e0db      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003616:	4b73      	ldr	r3, [pc, #460]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003618:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800361a:	e0d8      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003624:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003626:	4b6d      	ldr	r3, [pc, #436]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2200      	movs	r2, #0
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800363c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	2300      	movs	r3, #0
 8003648:	637b      	str	r3, [r7, #52]	@ 0x34
 800364a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800364e:	4622      	mov	r2, r4
 8003650:	462b      	mov	r3, r5
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	0159      	lsls	r1, r3, #5
 800365c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003660:	0150      	lsls	r0, r2, #5
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4621      	mov	r1, r4
 8003668:	1a51      	subs	r1, r2, r1
 800366a:	6139      	str	r1, [r7, #16]
 800366c:	4629      	mov	r1, r5
 800366e:	eb63 0301 	sbc.w	r3, r3, r1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003680:	4659      	mov	r1, fp
 8003682:	018b      	lsls	r3, r1, #6
 8003684:	4651      	mov	r1, sl
 8003686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368a:	4651      	mov	r1, sl
 800368c:	018a      	lsls	r2, r1, #6
 800368e:	4651      	mov	r1, sl
 8003690:	ebb2 0801 	subs.w	r8, r2, r1
 8003694:	4659      	mov	r1, fp
 8003696:	eb63 0901 	sbc.w	r9, r3, r1
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ae:	4690      	mov	r8, r2
 80036b0:	4699      	mov	r9, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	eb18 0303 	adds.w	r3, r8, r3
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	462b      	mov	r3, r5
 80036bc:	eb49 0303 	adc.w	r3, r9, r3
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ce:	4629      	mov	r1, r5
 80036d0:	024b      	lsls	r3, r1, #9
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036d8:	4621      	mov	r1, r4
 80036da:	024a      	lsls	r2, r1, #9
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036ec:	f7fc fdf8 	bl	80002e0 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	e058      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b38      	ldr	r3, [pc, #224]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	2200      	movs	r2, #0
 8003702:	4618      	mov	r0, r3
 8003704:	4611      	mov	r1, r2
 8003706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	f04f 0000 	mov.w	r0, #0
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	0159      	lsls	r1, r3, #5
 8003722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003726:	0150      	lsls	r0, r2, #5
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4641      	mov	r1, r8
 800372e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb63 0b01 	sbc.w	fp, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800374c:	ebb2 040a 	subs.w	r4, r2, sl
 8003750:	eb63 050b 	sbc.w	r5, r3, fp
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	00eb      	lsls	r3, r5, #3
 800375e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003762:	00e2      	lsls	r2, r4, #3
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4643      	mov	r3, r8
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	464b      	mov	r3, r9
 8003770:	eb45 0303 	adc.w	r3, r5, r3
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003782:	4629      	mov	r1, r5
 8003784:	028b      	lsls	r3, r1, #10
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800378c:	4621      	mov	r1, r4
 800378e:	028a      	lsls	r2, r1, #10
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	61fa      	str	r2, [r7, #28]
 800379c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a0:	f7fc fd9e 	bl	80002e0 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3750      	adds	r7, #80	@ 0x50
 80037d4:	46bd      	mov	sp, r7
 80037d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003804:	f7ff fff0 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0a9b      	lsrs	r3, r3, #10
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	@ (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	08008134 	.word	0x08008134

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800382c:	f7ff ffdc 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0b5b      	lsrs	r3, r3, #13
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08008134 	.word	0x08008134

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003878:	4b69      	ldr	r3, [pc, #420]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	4b66      	ldr	r3, [pc, #408]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388c:	4964      	ldr	r1, [pc, #400]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	4959      	ldr	r1, [pc, #356]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c8:	d101      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ca:	2301      	movs	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	494a      	ldr	r1, [pc, #296]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003904:	d101      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 808b 	beq.w	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b3a      	ldr	r3, [pc, #232]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	4a39      	ldr	r2, [pc, #228]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003940:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800394c:	4b35      	ldr	r3, [pc, #212]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a34      	ldr	r2, [pc, #208]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd ff3e 	bl	80017d8 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fd ff3a 	bl	80017d8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e38f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003986:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d035      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d02e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800399c:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039be:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c4:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d114      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd ff02 	bl	80017d8 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fd fefe 	bl	80017d8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e351      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a06:	d111      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a16:	400b      	ands	r3, r1
 8003a18:	4901      	ldr	r1, [pc, #4]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40007000 	.word	0x40007000
 8003a28:	0ffffcff 	.word	0x0ffffcff
 8003a2c:	4bac      	ldr	r3, [pc, #688]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4aab      	ldr	r2, [pc, #684]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	4ba9      	ldr	r3, [pc, #676]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	49a6      	ldr	r1, [pc, #664]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a56:	4ba2      	ldr	r3, [pc, #648]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5c:	4aa0      	ldr	r2, [pc, #640]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a66:	4b9e      	ldr	r3, [pc, #632]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	499b      	ldr	r1, [pc, #620]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a84:	4b96      	ldr	r3, [pc, #600]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a92:	4993      	ldr	r1, [pc, #588]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab4:	498a      	ldr	r1, [pc, #552]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac8:	4b85      	ldr	r3, [pc, #532]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad6:	4982      	ldr	r1, [pc, #520]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	4979      	ldr	r1, [pc, #484]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b0c:	4b74      	ldr	r3, [pc, #464]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	4971      	ldr	r1, [pc, #452]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b34:	f023 020c 	bic.w	r2, r3, #12
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	4968      	ldr	r1, [pc, #416]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b50:	4b63      	ldr	r3, [pc, #396]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	4960      	ldr	r1, [pc, #384]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b72:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b80:	4957      	ldr	r1, [pc, #348]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b94:	4b52      	ldr	r3, [pc, #328]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	494f      	ldr	r1, [pc, #316]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	4946      	ldr	r1, [pc, #280]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bd8:	4b41      	ldr	r3, [pc, #260]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	493e      	ldr	r1, [pc, #248]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	4935      	ldr	r1, [pc, #212]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c1c:	4b30      	ldr	r3, [pc, #192]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c2a:	492d      	ldr	r1, [pc, #180]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4c:	4924      	ldr	r1, [pc, #144]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	4914      	ldr	r1, [pc, #80]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb0:	490b      	ldr	r1, [pc, #44]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd4:	4902      	ldr	r1, [pc, #8]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	4986      	ldr	r1, [pc, #536]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d14:	4b81      	ldr	r3, [pc, #516]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d24:	497d      	ldr	r1, [pc, #500]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d006      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80d6 	beq.w	8003eec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d40:	4b76      	ldr	r3, [pc, #472]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a75      	ldr	r2, [pc, #468]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fd fd44 	bl	80017d8 <HAL_GetTick>
 8003d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d54:	f7fd fd40 	bl	80017d8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e195      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d66:	4b6d      	ldr	r3, [pc, #436]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d021      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11d      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d86:	4b65      	ldr	r3, [pc, #404]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d94:	4b61      	ldr	r3, [pc, #388]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d9a:	0e1b      	lsrs	r3, r3, #24
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	019a      	lsls	r2, r3, #6
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	071b      	lsls	r3, r3, #28
 8003dba:	4958      	ldr	r1, [pc, #352]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02e      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dec:	d129      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dee:	4b4b      	ldr	r3, [pc, #300]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dfc:	4b47      	ldr	r3, [pc, #284]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	493e      	ldr	r1, [pc, #248]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e30:	f023 021f 	bic.w	r2, r3, #31
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	4938      	ldr	r1, [pc, #224]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01d      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e4e:	4b33      	ldr	r3, [pc, #204]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e62:	0f1b      	lsrs	r3, r3, #28
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	019a      	lsls	r2, r3, #6
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	431a      	orrs	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	4926      	ldr	r1, [pc, #152]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	019a      	lsls	r2, r3, #6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	491a      	ldr	r1, [pc, #104]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eba:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a17      	ldr	r2, [pc, #92]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec6:	f7fd fc87 	bl	80017d8 <HAL_GetTick>
 8003eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ece:	f7fd fc83 	bl	80017d8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	@ 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0d8      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	f040 80ce 	bne.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fc6a 	bl	80017d8 <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f06:	e00b      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f08:	f7fd fc66 	bl	80017d8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	@ 0x64
 8003f14:	d904      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0bb      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f20:	4b5e      	ldr	r3, [pc, #376]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2c:	d0ec      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d12a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f56:	4b51      	ldr	r3, [pc, #324]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f64:	4b4d      	ldr	r3, [pc, #308]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	0f1b      	lsrs	r3, r3, #28
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	019a      	lsls	r2, r3, #6
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	071b      	lsls	r3, r3, #28
 8003f8a:	4944      	ldr	r1, [pc, #272]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f92:	4b42      	ldr	r3, [pc, #264]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f98:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	493d      	ldr	r1, [pc, #244]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc0:	d11d      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc2:	4b36      	ldr	r3, [pc, #216]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc8:	0e1b      	lsrs	r3, r3, #24
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	0f1b      	lsrs	r3, r3, #28
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	019a      	lsls	r2, r3, #6
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	4929      	ldr	r1, [pc, #164]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d028      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400a:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004018:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	431a      	orrs	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4917      	ldr	r1, [pc, #92]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800404c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4911      	ldr	r1, [pc, #68]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800405c:	4b0f      	ldr	r3, [pc, #60]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0e      	ldr	r2, [pc, #56]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fd fbb6 	bl	80017d8 <HAL_GetTick>
 800406c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004070:	f7fd fbb2 	bl	80017d8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e007      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800408a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800408e:	d1ef      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e09d      	b.n	80041ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c2:	d009      	beq.n	80040d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
 80040ca:	e005      	b.n	80040d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc ffc2 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800410e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004118:	d902      	bls.n	8004120 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e002      	b.n	8004126 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004124:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800412e:	d007      	beq.n	8004140 <HAL_SPI_Init+0xa0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004138:	d002      	beq.n	8004140 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	ea42 0103 	orr.w	r1, r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	f003 0204 	and.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041bc:	ea42 0103 	orr.w	r1, r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e049      	b.n	800429c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc ffdf 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f000 ff27 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e049      	b.n	800434a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f841 	bl	8004352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fed0 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x24>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e03c      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d109      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x3e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e02f      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start+0x58>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e022      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d109      	bne.n	80043da <HAL_TIM_PWM_Start+0x72>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e015      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e008      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e092      	b.n	8004534 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xb6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	e023      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xc6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800442c:	e01b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xd6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	e013      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xe6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800444c:	e00b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xf6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800445c:	e003      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fad2 	bl	8005a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	@ (800453c <HAL_TIM_PWM_Start+0x1d4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_PWM_Start+0x120>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2f      	ldr	r2, [pc, #188]	@ (8004540 <HAL_TIM_PWM_Start+0x1d8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_TIM_PWM_Start+0x124>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_TIM_PWM_Start+0x126>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a25      	ldr	r2, [pc, #148]	@ (800453c <HAL_TIM_PWM_Start+0x1d4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d022      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b4:	d01d      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <HAL_TIM_PWM_Start+0x1dc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a20      	ldr	r2, [pc, #128]	@ (8004548 <HAL_TIM_PWM_Start+0x1e0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1f      	ldr	r2, [pc, #124]	@ (800454c <HAL_TIM_PWM_Start+0x1e4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a19      	ldr	r2, [pc, #100]	@ (8004540 <HAL_TIM_PWM_Start+0x1d8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_TIM_PWM_Start+0x1e8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x18a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_TIM_PWM_Start+0x1ec>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d115      	bne.n	800451e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <HAL_TIM_PWM_Start+0x1f0>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d015      	beq.n	8004530 <HAL_TIM_PWM_Start+0x1c8>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450a:	d011      	beq.n	8004530 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	e008      	b.n	8004530 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e000      	b.n	8004532 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40014000 	.word	0x40014000
 8004554:	40001800 	.word	0x40001800
 8004558:	00010007 	.word	0x00010007

0800455c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fe66 	bl	8001254 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fd74 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_TIM_IC_Start_IT+0x1e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e023      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x66>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d104      	bne.n	800463a <HAL_TIM_IC_Start_IT+0x2e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e01b      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x66>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d104      	bne.n	800464a <HAL_TIM_IC_Start_IT+0x3e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e013      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x66>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d104      	bne.n	800465a <HAL_TIM_IC_Start_IT+0x4e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e00b      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x66>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d104      	bne.n	800466a <HAL_TIM_IC_Start_IT+0x5e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004666:	b2db      	uxtb	r3, r3
 8004668:	e003      	b.n	8004672 <HAL_TIM_IC_Start_IT+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004670:	b2db      	uxtb	r3, r3
 8004672:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <HAL_TIM_IC_Start_IT+0x78>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e013      	b.n	80046ac <HAL_TIM_IC_Start_IT+0xa0>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b04      	cmp	r3, #4
 8004688:	d104      	bne.n	8004694 <HAL_TIM_IC_Start_IT+0x88>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e00b      	b.n	80046ac <HAL_TIM_IC_Start_IT+0xa0>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d104      	bne.n	80046a4 <HAL_TIM_IC_Start_IT+0x98>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e003      	b.n	80046ac <HAL_TIM_IC_Start_IT+0xa0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d102      	bne.n	80046ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80046b4:	7b7b      	ldrb	r3, [r7, #13]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e0e2      	b.n	8004884 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_IC_Start_IT+0xc2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046cc:	e023      	b.n	8004716 <HAL_TIM_IC_Start_IT+0x10a>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d104      	bne.n	80046de <HAL_TIM_IC_Start_IT+0xd2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046dc:	e01b      	b.n	8004716 <HAL_TIM_IC_Start_IT+0x10a>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_IC_Start_IT+0xe2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ec:	e013      	b.n	8004716 <HAL_TIM_IC_Start_IT+0x10a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_IC_Start_IT+0xf2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046fc:	e00b      	b.n	8004716 <HAL_TIM_IC_Start_IT+0x10a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b10      	cmp	r3, #16
 8004702:	d104      	bne.n	800470e <HAL_TIM_IC_Start_IT+0x102>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470c:	e003      	b.n	8004716 <HAL_TIM_IC_Start_IT+0x10a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_IC_Start_IT+0x11a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004724:	e013      	b.n	800474e <HAL_TIM_IC_Start_IT+0x142>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d104      	bne.n	8004736 <HAL_TIM_IC_Start_IT+0x12a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004734:	e00b      	b.n	800474e <HAL_TIM_IC_Start_IT+0x142>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d104      	bne.n	8004746 <HAL_TIM_IC_Start_IT+0x13a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004744:	e003      	b.n	800474e <HAL_TIM_IC_Start_IT+0x142>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d841      	bhi.n	80047d8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <HAL_TIM_IC_Start_IT+0x150>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004791 	.word	0x08004791
 8004760:	080047d9 	.word	0x080047d9
 8004764:	080047d9 	.word	0x080047d9
 8004768:	080047d9 	.word	0x080047d9
 800476c:	080047a3 	.word	0x080047a3
 8004770:	080047d9 	.word	0x080047d9
 8004774:	080047d9 	.word	0x080047d9
 8004778:	080047d9 	.word	0x080047d9
 800477c:	080047b5 	.word	0x080047b5
 8004780:	080047d9 	.word	0x080047d9
 8004784:	080047d9 	.word	0x080047d9
 8004788:	080047d9 	.word	0x080047d9
 800478c:	080047c7 	.word	0x080047c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0202 	orr.w	r2, r2, #2
 800479e:	60da      	str	r2, [r3, #12]
      break;
 80047a0:	e01d      	b.n	80047de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0204 	orr.w	r2, r2, #4
 80047b0:	60da      	str	r2, [r3, #12]
      break;
 80047b2:	e014      	b.n	80047de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	60da      	str	r2, [r3, #12]
      break;
 80047c4:	e00b      	b.n	80047de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0210 	orr.w	r2, r2, #16
 80047d4:	60da      	str	r2, [r3, #12]
      break;
 80047d6:	e002      	b.n	80047de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d14e      	bne.n	8004882 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 f913 	bl	8005a18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a25      	ldr	r2, [pc, #148]	@ (800488c <HAL_TIM_IC_Start_IT+0x280>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d01d      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_TIM_IC_Start_IT+0x284>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_TIM_IC_Start_IT+0x288>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <HAL_TIM_IC_Start_IT+0x28c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <HAL_TIM_IC_Start_IT+0x290>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <HAL_TIM_IC_Start_IT+0x294>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0x236>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_TIM_IC_Start_IT+0x298>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d115      	bne.n	800486e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4b17      	ldr	r3, [pc, #92]	@ (80048a8 <HAL_TIM_IC_Start_IT+0x29c>)
 800484a:	4013      	ands	r3, r2
 800484c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d015      	beq.n	8004880 <HAL_TIM_IC_Start_IT+0x274>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485a:	d011      	beq.n	8004880 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	e008      	b.n	8004880 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e000      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40010400 	.word	0x40010400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40001800 	.word	0x40001800
 80048a8:	00010007 	.word	0x00010007

080048ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0202 	mvn.w	r2, #2
 80048e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 fe0e 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fba4 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fbab 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d020      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f002 fde8 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb7e 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fb85 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f002 fdc2 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fb58 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fb5f 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0210 	mvn.w	r2, #16
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2208      	movs	r2, #8
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f002 fd9c 	bl	8007518 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fb32 	bl	800504c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb39 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0201 	mvn.w	r2, #1
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb10 	bl	8005038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 f925 	bl	8005c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f91d 	bl	8005ca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 faf3 	bl	8005074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0220 	mvn.w	r2, #32
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f001 f8e5 	bl	8005c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e088      	b.n	8004bea <HAL_TIM_IC_ConfigChannel+0x130>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004af6:	f000 fdcb 	bl	8005690 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020c 	bic.w	r2, r2, #12
 8004b08:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6999      	ldr	r1, [r3, #24]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
 8004b1c:	e060      	b.n	8004be0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11c      	bne.n	8004b5e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004b34:	f000 fe4f 	bl	80057d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b46:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
 8004b5c:	e040      	b.n	8004be0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b74:	f000 fe9c 	bl	80058b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020c 	bic.w	r2, r2, #12
 8004b86:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69d9      	ldr	r1, [r3, #28]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	61da      	str	r2, [r3, #28]
 8004b9a:	e021      	b.n	8004be0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d11c      	bne.n	8004bdc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004bb2:	f000 feb9 	bl	8005928 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
 8004bda:	e001      	b.n	8004be0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0ff      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b14      	cmp	r3, #20
 8004c1e:	f200 80f0 	bhi.w	8004e02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c22:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004e03 	.word	0x08004e03
 8004c30:	08004e03 	.word	0x08004e03
 8004c34:	08004e03 	.word	0x08004e03
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004e03 	.word	0x08004e03
 8004c40:	08004e03 	.word	0x08004e03
 8004c44:	08004e03 	.word	0x08004e03
 8004c48:	08004cff 	.word	0x08004cff
 8004c4c:	08004e03 	.word	0x08004e03
 8004c50:	08004e03 	.word	0x08004e03
 8004c54:	08004e03 	.word	0x08004e03
 8004c58:	08004d3f 	.word	0x08004d3f
 8004c5c:	08004e03 	.word	0x08004e03
 8004c60:	08004e03 	.word	0x08004e03
 8004c64:	08004e03 	.word	0x08004e03
 8004c68:	08004d81 	.word	0x08004d81
 8004c6c:	08004e03 	.word	0x08004e03
 8004c70:	08004e03 	.word	0x08004e03
 8004c74:	08004e03 	.word	0x08004e03
 8004c78:	08004dc1 	.word	0x08004dc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 faa6 	bl	80051d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6999      	ldr	r1, [r3, #24]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	619a      	str	r2, [r3, #24]
      break;
 8004cba:	e0a5      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 faf8 	bl	80052b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]
      break;
 8004cfc:	e084      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fb4f 	bl	80053a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0208 	orr.w	r2, r2, #8
 8004d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0204 	bic.w	r2, r2, #4
 8004d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      break;
 8004d3c:	e064      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fba5 	bl	8005494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	021a      	lsls	r2, r3, #8
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	61da      	str	r2, [r3, #28]
      break;
 8004d7e:	e043      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fbdc 	bl	8005544 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004dbe:	e023      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fc0e 	bl	80055e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_ConfigClockSource+0x1c>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e0b4      	b.n	8004fa2 <HAL_TIM_ConfigClockSource+0x186>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	4b56      	ldr	r3, [pc, #344]	@ (8004fac <HAL_TIM_ConfigClockSource+0x190>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e70:	d03e      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e76:	f200 8087 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7e:	f000 8086 	beq.w	8004f8e <HAL_TIM_ConfigClockSource+0x172>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e86:	d87f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b70      	cmp	r3, #112	@ 0x70
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e8c:	2b70      	cmp	r3, #112	@ 0x70
 8004e8e:	d87b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b60      	cmp	r3, #96	@ 0x60
 8004e92:	d050      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x11a>
 8004e94:	2b60      	cmp	r3, #96	@ 0x60
 8004e96:	d877      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b50      	cmp	r3, #80	@ 0x50
 8004e9a:	d03c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xfa>
 8004e9c:	2b50      	cmp	r3, #80	@ 0x50
 8004e9e:	d873      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b40      	cmp	r3, #64	@ 0x40
 8004ea2:	d058      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d86f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b30      	cmp	r3, #48	@ 0x30
 8004eaa:	d064      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b30      	cmp	r3, #48	@ 0x30
 8004eae:	d86b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d060      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d867      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d05a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x15a>
 8004ec0:	e062      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed2:	f000 fd81 	bl	80059d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e04f      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f00:	f000 fd6a 	bl	80059d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f12:	609a      	str	r2, [r3, #8]
      break;
 8004f14:	e03c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 fc28 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2150      	movs	r1, #80	@ 0x50
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fd37 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e02c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 fc84 	bl	8005850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2160      	movs	r1, #96	@ 0x60
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fd27 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e01c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 fc08 	bl	8005778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2140      	movs	r1, #64	@ 0x40
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fd17 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e00c      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 fd0e 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8004f86:	e003      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f8c:	e000      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	fffeff88 	.word	0xfffeff88

08004fb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d831      	bhi.n	8005028 <HAL_TIM_ReadCapturedValue+0x78>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	0800500b 	.word	0x0800500b
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08005029 	.word	0x08005029
 8004fe8:	08005029 	.word	0x08005029
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005029 	.word	0x08005029
 8004ffc:	0800501f 	.word	0x0800501f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	60fb      	str	r3, [r7, #12]

      break;
 8005008:	e00f      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	60fb      	str	r3, [r7, #12]

      break;
 8005012:	e00a      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	60fb      	str	r3, [r7, #12]

      break;
 800501c:	e005      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	60fb      	str	r3, [r7, #12]

      break;
 8005026:	e000      	b.n	800502a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005028:	bf00      	nop
  }

  return tmpreg;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a43      	ldr	r2, [pc, #268]	@ (80051a8 <TIM_Base_SetConfig+0x120>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a6:	d00f      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a40      	ldr	r2, [pc, #256]	@ (80051ac <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <TIM_Base_SetConfig+0x128>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3e      	ldr	r2, [pc, #248]	@ (80051b4 <TIM_Base_SetConfig+0x12c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3d      	ldr	r2, [pc, #244]	@ (80051b8 <TIM_Base_SetConfig+0x130>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d108      	bne.n	80050da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a32      	ldr	r2, [pc, #200]	@ (80051a8 <TIM_Base_SetConfig+0x120>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e8:	d027      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2f      	ldr	r2, [pc, #188]	@ (80051ac <TIM_Base_SetConfig+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d023      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	@ (80051b0 <TIM_Base_SetConfig+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	@ (80051b4 <TIM_Base_SetConfig+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <TIM_Base_SetConfig+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d017      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <TIM_Base_SetConfig+0x134>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <TIM_Base_SetConfig+0x138>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00f      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a29      	ldr	r2, [pc, #164]	@ (80051c4 <TIM_Base_SetConfig+0x13c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a28      	ldr	r2, [pc, #160]	@ (80051c8 <TIM_Base_SetConfig+0x140>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a27      	ldr	r2, [pc, #156]	@ (80051cc <TIM_Base_SetConfig+0x144>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a26      	ldr	r2, [pc, #152]	@ (80051d0 <TIM_Base_SetConfig+0x148>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <TIM_Base_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0xf2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a10      	ldr	r2, [pc, #64]	@ (80051b8 <TIM_Base_SetConfig+0x130>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d103      	bne.n	8005182 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800
 80051c8:	40001800 	.word	0x40001800
 80051cc:	40001c00 	.word	0x40001c00
 80051d0:	40002000 	.word	0x40002000

080051d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f023 0201 	bic.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <TIM_OC1_SetConfig+0xd8>)
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 0302 	bic.w	r3, r3, #2
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a21      	ldr	r2, [pc, #132]	@ (80052b0 <TIM_OC1_SetConfig+0xdc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC1_SetConfig+0x64>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a20      	ldr	r2, [pc, #128]	@ (80052b4 <TIM_OC1_SetConfig+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <TIM_OC1_SetConfig+0xdc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_OC1_SetConfig+0x8e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	@ (80052b4 <TIM_OC1_SetConfig+0xe0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d111      	bne.n	8005286 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	fffeff8f 	.word	0xfffeff8f
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400

080052b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0210 	bic.w	r2, r3, #16
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4b2e      	ldr	r3, [pc, #184]	@ (800539c <TIM_OC2_SetConfig+0xe4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0320 	bic.w	r3, r3, #32
 8005302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a23      	ldr	r2, [pc, #140]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC2_SetConfig+0x68>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <TIM_OC2_SetConfig+0xec>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10d      	bne.n	800533c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC2_SetConfig+0x94>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <TIM_OC2_SetConfig+0xec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	feff8fff 	.word	0xfeff8fff
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40010400 	.word	0x40010400

080053a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005488 <TIM_OC3_SetConfig+0xe0>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a22      	ldr	r2, [pc, #136]	@ (800548c <TIM_OC3_SetConfig+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC3_SetConfig+0x66>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a21      	ldr	r2, [pc, #132]	@ (8005490 <TIM_OC3_SetConfig+0xe8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10d      	bne.n	800542a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a17      	ldr	r2, [pc, #92]	@ (800548c <TIM_OC3_SetConfig+0xe4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_OC3_SetConfig+0x92>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a16      	ldr	r2, [pc, #88]	@ (8005490 <TIM_OC3_SetConfig+0xe8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d113      	bne.n	8005462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	fffeff8f 	.word	0xfffeff8f
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400

08005494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <TIM_OC4_SetConfig+0xa4>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a13      	ldr	r2, [pc, #76]	@ (800553c <TIM_OC4_SetConfig+0xa8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC4_SetConfig+0x68>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <TIM_OC4_SetConfig+0xac>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	feff8fff 	.word	0xfeff8fff
 800553c:	40010000 	.word	0x40010000
 8005540:	40010400 	.word	0x40010400

08005544 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <TIM_OC5_SetConfig+0x98>)
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <TIM_OC5_SetConfig+0x9c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_OC5_SetConfig+0x5e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <TIM_OC5_SetConfig+0xa0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d109      	bne.n	80055b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	fffeff8f 	.word	0xfffeff8f
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40010400 	.word	0x40010400

080055e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4b1c      	ldr	r3, [pc, #112]	@ (8005684 <TIM_OC6_SetConfig+0x9c>)
 8005614:	4013      	ands	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800562a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <TIM_OC6_SetConfig+0xa0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC6_SetConfig+0x60>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a12      	ldr	r2, [pc, #72]	@ (800568c <TIM_OC6_SetConfig+0xa4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d109      	bne.n	800565c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800564e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	029b      	lsls	r3, r3, #10
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	feff8fff 	.word	0xfeff8fff
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400

08005690 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f023 0201 	bic.w	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4a28      	ldr	r2, [pc, #160]	@ (800575c <TIM_TI1_SetConfig+0xcc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01b      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c4:	d017      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <TIM_TI1_SetConfig+0xd0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a24      	ldr	r2, [pc, #144]	@ (8005764 <TIM_TI1_SetConfig+0xd4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a23      	ldr	r2, [pc, #140]	@ (8005768 <TIM_TI1_SetConfig+0xd8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a22      	ldr	r2, [pc, #136]	@ (800576c <TIM_TI1_SetConfig+0xdc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a21      	ldr	r2, [pc, #132]	@ (8005770 <TIM_TI1_SetConfig+0xe0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_TI1_SetConfig+0x66>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a20      	ldr	r2, [pc, #128]	@ (8005774 <TIM_TI1_SetConfig+0xe4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <TIM_TI1_SetConfig+0x6a>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <TIM_TI1_SetConfig+0x6c>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e003      	b.n	800571a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	b2db      	uxtb	r3, r3
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 030a 	and.w	r3, r3, #10
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40010000 	.word	0x40010000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010400 	.word	0x40010400
 8005770:	40014000 	.word	0x40014000
 8005774:	40001800 	.word	0x40001800

08005778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0201 	bic.w	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 030a 	bic.w	r3, r3, #10
 80057b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0210 	bic.w	r2, r3, #16
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	b29b      	uxth	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0210 	bic.w	r2, r3, #16
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800587a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	031b      	lsls	r3, r3, #12
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800588c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f023 0303 	bic.w	r3, r3, #3
 80058dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005900:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005954:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005966:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	031b      	lsls	r3, r3, #12
 800596c:	b29b      	uxth	r3, r3
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800597a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	031b      	lsls	r3, r3, #12
 8005980:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f043 0307 	orr.w	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1a      	ldr	r2, [r3, #32]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e06d      	b.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aee:	d01d      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1a      	ldr	r2, [pc, #104]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d10c      	bne.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40001800 	.word	0x40001800

08005b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e065      	b.n	8005c68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a16      	ldr	r2, [pc, #88]	@ (8005c74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a14      	ldr	r2, [pc, #80]	@ (8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d115      	bne.n	8005c56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	051b      	lsls	r3, r3, #20
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e040      	b.n	8005d4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb fb64 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	@ 0x24
 8005ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fb84 	bl	800640c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f91d 	bl	8005f44 <UART_SetConfig>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e01b      	b.n	8005d4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fc03 	bl	8006550 <UART_CheckIdleState>
 8005d4a:	4603      	mov	r3, r0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d177      	bne.n	8005e5c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Transmit+0x24>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e070      	b.n	8005e5e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2221      	movs	r2, #33	@ 0x21
 8005d88:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d8a:	f7fb fd25 	bl	80017d8 <HAL_GetTick>
 8005d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da8:	d108      	bne.n	8005dbc <HAL_UART_Transmit+0x68>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e003      	b.n	8005dc4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dc4:	e02f      	b.n	8005e26 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	@ 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fc65 	bl	80066a0 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e03b      	b.n	8005e5e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10b      	bne.n	8005e04 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	3302      	adds	r3, #2
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e007      	b.n	8005e14 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1c9      	bne.n	8005dc6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	@ 0x40
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fc2f 	bl	80066a0 <UART_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e005      	b.n	8005e5e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b08a      	sub	sp, #40	@ 0x28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	4613      	mov	r3, r2
 8005e72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d132      	bne.n	8005ee4 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_UART_Receive_DMA+0x24>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e02b      	b.n	8005ee6 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69f9      	ldr	r1, [r7, #28]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fc4e 	bl	800677c <UART_Start_Receive_DMA>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	@ 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4ba6      	ldr	r3, [pc, #664]	@ (8006208 <UART_SetConfig+0x2c4>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6979      	ldr	r1, [r7, #20]
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a94      	ldr	r2, [pc, #592]	@ (800620c <UART_SetConfig+0x2c8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d120      	bne.n	8006002 <UART_SetConfig+0xbe>
 8005fc0:	4b93      	ldr	r3, [pc, #588]	@ (8006210 <UART_SetConfig+0x2cc>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d816      	bhi.n	8005ffc <UART_SetConfig+0xb8>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <UART_SetConfig+0x90>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08005feb 	.word	0x08005feb
 8005fe0:	08005ff7 	.word	0x08005ff7
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e150      	b.n	800628c <UART_SetConfig+0x348>
 8005fea:	2302      	movs	r3, #2
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e14d      	b.n	800628c <UART_SetConfig+0x348>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e14a      	b.n	800628c <UART_SetConfig+0x348>
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e147      	b.n	800628c <UART_SetConfig+0x348>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e144      	b.n	800628c <UART_SetConfig+0x348>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a83      	ldr	r2, [pc, #524]	@ (8006214 <UART_SetConfig+0x2d0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d132      	bne.n	8006072 <UART_SetConfig+0x12e>
 800600c:	4b80      	ldr	r3, [pc, #512]	@ (8006210 <UART_SetConfig+0x2cc>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d828      	bhi.n	800606c <UART_SetConfig+0x128>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0xdc>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006055 	.word	0x08006055
 8006024:	0800606d 	.word	0x0800606d
 8006028:	0800606d 	.word	0x0800606d
 800602c:	0800606d 	.word	0x0800606d
 8006030:	08006061 	.word	0x08006061
 8006034:	0800606d 	.word	0x0800606d
 8006038:	0800606d 	.word	0x0800606d
 800603c:	0800606d 	.word	0x0800606d
 8006040:	0800605b 	.word	0x0800605b
 8006044:	0800606d 	.word	0x0800606d
 8006048:	0800606d 	.word	0x0800606d
 800604c:	0800606d 	.word	0x0800606d
 8006050:	08006067 	.word	0x08006067
 8006054:	2300      	movs	r3, #0
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e118      	b.n	800628c <UART_SetConfig+0x348>
 800605a:	2302      	movs	r3, #2
 800605c:	77fb      	strb	r3, [r7, #31]
 800605e:	e115      	b.n	800628c <UART_SetConfig+0x348>
 8006060:	2304      	movs	r3, #4
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e112      	b.n	800628c <UART_SetConfig+0x348>
 8006066:	2308      	movs	r3, #8
 8006068:	77fb      	strb	r3, [r7, #31]
 800606a:	e10f      	b.n	800628c <UART_SetConfig+0x348>
 800606c:	2310      	movs	r3, #16
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e10c      	b.n	800628c <UART_SetConfig+0x348>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a68      	ldr	r2, [pc, #416]	@ (8006218 <UART_SetConfig+0x2d4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d120      	bne.n	80060be <UART_SetConfig+0x17a>
 800607c:	4b64      	ldr	r3, [pc, #400]	@ (8006210 <UART_SetConfig+0x2cc>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006086:	2b30      	cmp	r3, #48	@ 0x30
 8006088:	d013      	beq.n	80060b2 <UART_SetConfig+0x16e>
 800608a:	2b30      	cmp	r3, #48	@ 0x30
 800608c:	d814      	bhi.n	80060b8 <UART_SetConfig+0x174>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d009      	beq.n	80060a6 <UART_SetConfig+0x162>
 8006092:	2b20      	cmp	r3, #32
 8006094:	d810      	bhi.n	80060b8 <UART_SetConfig+0x174>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <UART_SetConfig+0x15c>
 800609a:	2b10      	cmp	r3, #16
 800609c:	d006      	beq.n	80060ac <UART_SetConfig+0x168>
 800609e:	e00b      	b.n	80060b8 <UART_SetConfig+0x174>
 80060a0:	2300      	movs	r3, #0
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e0f2      	b.n	800628c <UART_SetConfig+0x348>
 80060a6:	2302      	movs	r3, #2
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e0ef      	b.n	800628c <UART_SetConfig+0x348>
 80060ac:	2304      	movs	r3, #4
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e0ec      	b.n	800628c <UART_SetConfig+0x348>
 80060b2:	2308      	movs	r3, #8
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e0e9      	b.n	800628c <UART_SetConfig+0x348>
 80060b8:	2310      	movs	r3, #16
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e0e6      	b.n	800628c <UART_SetConfig+0x348>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a56      	ldr	r2, [pc, #344]	@ (800621c <UART_SetConfig+0x2d8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d120      	bne.n	800610a <UART_SetConfig+0x1c6>
 80060c8:	4b51      	ldr	r3, [pc, #324]	@ (8006210 <UART_SetConfig+0x2cc>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80060d4:	d013      	beq.n	80060fe <UART_SetConfig+0x1ba>
 80060d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060d8:	d814      	bhi.n	8006104 <UART_SetConfig+0x1c0>
 80060da:	2b80      	cmp	r3, #128	@ 0x80
 80060dc:	d009      	beq.n	80060f2 <UART_SetConfig+0x1ae>
 80060de:	2b80      	cmp	r3, #128	@ 0x80
 80060e0:	d810      	bhi.n	8006104 <UART_SetConfig+0x1c0>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <UART_SetConfig+0x1a8>
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	d006      	beq.n	80060f8 <UART_SetConfig+0x1b4>
 80060ea:	e00b      	b.n	8006104 <UART_SetConfig+0x1c0>
 80060ec:	2300      	movs	r3, #0
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e0cc      	b.n	800628c <UART_SetConfig+0x348>
 80060f2:	2302      	movs	r3, #2
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e0c9      	b.n	800628c <UART_SetConfig+0x348>
 80060f8:	2304      	movs	r3, #4
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e0c6      	b.n	800628c <UART_SetConfig+0x348>
 80060fe:	2308      	movs	r3, #8
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e0c3      	b.n	800628c <UART_SetConfig+0x348>
 8006104:	2310      	movs	r3, #16
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e0c0      	b.n	800628c <UART_SetConfig+0x348>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a44      	ldr	r2, [pc, #272]	@ (8006220 <UART_SetConfig+0x2dc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d125      	bne.n	8006160 <UART_SetConfig+0x21c>
 8006114:	4b3e      	ldr	r3, [pc, #248]	@ (8006210 <UART_SetConfig+0x2cc>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800611e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006122:	d017      	beq.n	8006154 <UART_SetConfig+0x210>
 8006124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006128:	d817      	bhi.n	800615a <UART_SetConfig+0x216>
 800612a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800612e:	d00b      	beq.n	8006148 <UART_SetConfig+0x204>
 8006130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006134:	d811      	bhi.n	800615a <UART_SetConfig+0x216>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <UART_SetConfig+0x1fe>
 800613a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613e:	d006      	beq.n	800614e <UART_SetConfig+0x20a>
 8006140:	e00b      	b.n	800615a <UART_SetConfig+0x216>
 8006142:	2300      	movs	r3, #0
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e0a1      	b.n	800628c <UART_SetConfig+0x348>
 8006148:	2302      	movs	r3, #2
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e09e      	b.n	800628c <UART_SetConfig+0x348>
 800614e:	2304      	movs	r3, #4
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e09b      	b.n	800628c <UART_SetConfig+0x348>
 8006154:	2308      	movs	r3, #8
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e098      	b.n	800628c <UART_SetConfig+0x348>
 800615a:	2310      	movs	r3, #16
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e095      	b.n	800628c <UART_SetConfig+0x348>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2f      	ldr	r2, [pc, #188]	@ (8006224 <UART_SetConfig+0x2e0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d125      	bne.n	80061b6 <UART_SetConfig+0x272>
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <UART_SetConfig+0x2cc>)
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006178:	d017      	beq.n	80061aa <UART_SetConfig+0x266>
 800617a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800617e:	d817      	bhi.n	80061b0 <UART_SetConfig+0x26c>
 8006180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006184:	d00b      	beq.n	800619e <UART_SetConfig+0x25a>
 8006186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800618a:	d811      	bhi.n	80061b0 <UART_SetConfig+0x26c>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <UART_SetConfig+0x254>
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d006      	beq.n	80061a4 <UART_SetConfig+0x260>
 8006196:	e00b      	b.n	80061b0 <UART_SetConfig+0x26c>
 8006198:	2301      	movs	r3, #1
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e076      	b.n	800628c <UART_SetConfig+0x348>
 800619e:	2302      	movs	r3, #2
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e073      	b.n	800628c <UART_SetConfig+0x348>
 80061a4:	2304      	movs	r3, #4
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e070      	b.n	800628c <UART_SetConfig+0x348>
 80061aa:	2308      	movs	r3, #8
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e06d      	b.n	800628c <UART_SetConfig+0x348>
 80061b0:	2310      	movs	r3, #16
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e06a      	b.n	800628c <UART_SetConfig+0x348>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006228 <UART_SetConfig+0x2e4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d138      	bne.n	8006232 <UART_SetConfig+0x2ee>
 80061c0:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <UART_SetConfig+0x2cc>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061ce:	d017      	beq.n	8006200 <UART_SetConfig+0x2bc>
 80061d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061d4:	d82a      	bhi.n	800622c <UART_SetConfig+0x2e8>
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061da:	d00b      	beq.n	80061f4 <UART_SetConfig+0x2b0>
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e0:	d824      	bhi.n	800622c <UART_SetConfig+0x2e8>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <UART_SetConfig+0x2aa>
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ea:	d006      	beq.n	80061fa <UART_SetConfig+0x2b6>
 80061ec:	e01e      	b.n	800622c <UART_SetConfig+0x2e8>
 80061ee:	2300      	movs	r3, #0
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e04b      	b.n	800628c <UART_SetConfig+0x348>
 80061f4:	2302      	movs	r3, #2
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e048      	b.n	800628c <UART_SetConfig+0x348>
 80061fa:	2304      	movs	r3, #4
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e045      	b.n	800628c <UART_SetConfig+0x348>
 8006200:	2308      	movs	r3, #8
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e042      	b.n	800628c <UART_SetConfig+0x348>
 8006206:	bf00      	nop
 8006208:	efff69f3 	.word	0xefff69f3
 800620c:	40011000 	.word	0x40011000
 8006210:	40023800 	.word	0x40023800
 8006214:	40004400 	.word	0x40004400
 8006218:	40004800 	.word	0x40004800
 800621c:	40004c00 	.word	0x40004c00
 8006220:	40005000 	.word	0x40005000
 8006224:	40011400 	.word	0x40011400
 8006228:	40007800 	.word	0x40007800
 800622c:	2310      	movs	r3, #16
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e02c      	b.n	800628c <UART_SetConfig+0x348>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a72      	ldr	r2, [pc, #456]	@ (8006400 <UART_SetConfig+0x4bc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d125      	bne.n	8006288 <UART_SetConfig+0x344>
 800623c:	4b71      	ldr	r3, [pc, #452]	@ (8006404 <UART_SetConfig+0x4c0>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006242:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006246:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800624a:	d017      	beq.n	800627c <UART_SetConfig+0x338>
 800624c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006250:	d817      	bhi.n	8006282 <UART_SetConfig+0x33e>
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006256:	d00b      	beq.n	8006270 <UART_SetConfig+0x32c>
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800625c:	d811      	bhi.n	8006282 <UART_SetConfig+0x33e>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <UART_SetConfig+0x326>
 8006262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006266:	d006      	beq.n	8006276 <UART_SetConfig+0x332>
 8006268:	e00b      	b.n	8006282 <UART_SetConfig+0x33e>
 800626a:	2300      	movs	r3, #0
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e00d      	b.n	800628c <UART_SetConfig+0x348>
 8006270:	2302      	movs	r3, #2
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e00a      	b.n	800628c <UART_SetConfig+0x348>
 8006276:	2304      	movs	r3, #4
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e007      	b.n	800628c <UART_SetConfig+0x348>
 800627c:	2308      	movs	r3, #8
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e004      	b.n	800628c <UART_SetConfig+0x348>
 8006282:	2310      	movs	r3, #16
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e001      	b.n	800628c <UART_SetConfig+0x348>
 8006288:	2310      	movs	r3, #16
 800628a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006294:	d15b      	bne.n	800634e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b08      	cmp	r3, #8
 800629a:	d828      	bhi.n	80062ee <UART_SetConfig+0x3aa>
 800629c:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <UART_SetConfig+0x360>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062ef 	.word	0x080062ef
 80062b4:	080062df 	.word	0x080062df
 80062b8:	080062ef 	.word	0x080062ef
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	080062ef 	.word	0x080062ef
 80062c4:	080062e7 	.word	0x080062e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fd fa9a 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80062cc:	61b8      	str	r0, [r7, #24]
        break;
 80062ce:	e013      	b.n	80062f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fd faaa 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80062d4:	61b8      	str	r0, [r7, #24]
        break;
 80062d6:	e00f      	b.n	80062f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006408 <UART_SetConfig+0x4c4>)
 80062da:	61bb      	str	r3, [r7, #24]
        break;
 80062dc:	e00c      	b.n	80062f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062de:	f7fd f97d 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 80062e2:	61b8      	str	r0, [r7, #24]
        break;
 80062e4:	e008      	b.n	80062f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ea:	61bb      	str	r3, [r7, #24]
        break;
 80062ec:	e004      	b.n	80062f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	77bb      	strb	r3, [r7, #30]
        break;
 80062f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d074      	beq.n	80063e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	005a      	lsls	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	441a      	add	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d916      	bls.n	8006348 <UART_SetConfig+0x404>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006320:	d212      	bcs.n	8006348 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f023 030f 	bic.w	r3, r3, #15
 800632a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	b29a      	uxth	r2, r3
 8006338:	89fb      	ldrh	r3, [r7, #14]
 800633a:	4313      	orrs	r3, r2
 800633c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	89fa      	ldrh	r2, [r7, #14]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e04f      	b.n	80063e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	77bb      	strb	r3, [r7, #30]
 800634c:	e04c      	b.n	80063e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800634e:	7ffb      	ldrb	r3, [r7, #31]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d828      	bhi.n	80063a6 <UART_SetConfig+0x462>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <UART_SetConfig+0x418>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006381 	.word	0x08006381
 8006360:	08006389 	.word	0x08006389
 8006364:	08006391 	.word	0x08006391
 8006368:	080063a7 	.word	0x080063a7
 800636c:	08006397 	.word	0x08006397
 8006370:	080063a7 	.word	0x080063a7
 8006374:	080063a7 	.word	0x080063a7
 8006378:	080063a7 	.word	0x080063a7
 800637c:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fd fa3e 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 8006384:	61b8      	str	r0, [r7, #24]
        break;
 8006386:	e013      	b.n	80063b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006388:	f7fd fa4e 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 800638c:	61b8      	str	r0, [r7, #24]
        break;
 800638e:	e00f      	b.n	80063b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <UART_SetConfig+0x4c4>)
 8006392:	61bb      	str	r3, [r7, #24]
        break;
 8006394:	e00c      	b.n	80063b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fd f921 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800639a:	61b8      	str	r0, [r7, #24]
        break;
 800639c:	e008      	b.n	80063b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063a2:	61bb      	str	r3, [r7, #24]
        break;
 80063a4:	e004      	b.n	80063b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	77bb      	strb	r3, [r7, #30]
        break;
 80063ae:	bf00      	nop
    }

    if (pclk != 0U)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	085a      	lsrs	r2, r3, #1
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	441a      	add	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b0f      	cmp	r3, #15
 80063ce:	d909      	bls.n	80063e4 <UART_SetConfig+0x4a0>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d6:	d205      	bcs.n	80063e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e001      	b.n	80063e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40007c00 	.word	0x40007c00
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400

0800640c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01a      	beq.n	8006522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800650a:	d10a      	bne.n	8006522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b098      	sub	sp, #96	@ 0x60
 8006554:	af02      	add	r7, sp, #8
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006560:	f7fb f93a 	bl	80017d8 <HAL_GetTick>
 8006564:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d12e      	bne.n	80065d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006574:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657c:	2200      	movs	r2, #0
 800657e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f88c 	bl	80066a0 <UART_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d021      	beq.n	80065d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e062      	b.n	8006698 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d149      	bne.n	8006674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f856 	bl	80066a0 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d03c      	beq.n	8006674 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	623b      	str	r3, [r7, #32]
   return(result);
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006618:	633b      	str	r3, [r7, #48]	@ 0x30
 800661a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800661e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	60fb      	str	r3, [r7, #12]
   return(result);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800664c:	61fa      	str	r2, [r7, #28]
 800664e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	617b      	str	r3, [r7, #20]
   return(result);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e011      	b.n	8006698 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3758      	adds	r7, #88	@ 0x58
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b0:	e04f      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d04b      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fb f88d 	bl	80017d8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e04e      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d037      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b80      	cmp	r3, #128	@ 0x80
 80066e6:	d034      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b40      	cmp	r3, #64	@ 0x40
 80066ec:	d031      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d110      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2208      	movs	r2, #8
 8006702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f8ff 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2208      	movs	r2, #8
 800670e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e029      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672c:	d111      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f8e5 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e00f      	b.n	8006772 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d0a0      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b096      	sub	sp, #88	@ 0x58
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2222      	movs	r2, #34	@ 0x22
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d028      	beq.n	8006802 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b4:	4a3e      	ldr	r2, [pc, #248]	@ (80068b0 <UART_Start_Receive_DMA+0x134>)
 80067b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	4a3d      	ldr	r2, [pc, #244]	@ (80068b4 <UART_Start_Receive_DMA+0x138>)
 80067be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c4:	4a3c      	ldr	r2, [pc, #240]	@ (80068b8 <UART_Start_Receive_DMA+0x13c>)
 80067c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3324      	adds	r3, #36	@ 0x24
 80067da:	4619      	mov	r1, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e0:	461a      	mov	r2, r3
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	f7fb f9e8 	bl	8001bb8 <HAL_DMA_Start_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2210      	movs	r2, #16
 80067f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e051      	b.n	80068a6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800681e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800682a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800682e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e6      	bne.n	800680a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	653b      	str	r3, [r7, #80]	@ 0x50
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800685c:	637a      	str	r2, [r7, #52]	@ 0x34
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e5      	bne.n	800683c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	613b      	str	r3, [r7, #16]
   return(result);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006890:	623a      	str	r2, [r7, #32]
 8006892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	69f9      	ldr	r1, [r7, #28]
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	61bb      	str	r3, [r7, #24]
   return(result);
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3758      	adds	r7, #88	@ 0x58
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	080069d1 	.word	0x080069d1
 80068b4:	08006b2f 	.word	0x08006b2f
 80068b8:	08006ba1 	.word	0x08006ba1

080068bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b089      	sub	sp, #36	@ 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6979      	ldr	r1, [r7, #20]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	613b      	str	r3, [r7, #16]
   return(result);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068fc:	bf00      	nop
 80068fe:	3724      	adds	r7, #36	@ 0x24
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b095      	sub	sp, #84	@ 0x54
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006930:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e6      	bne.n	8006910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	61fb      	str	r3, [r7, #28]
   return(result);
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e5      	bne.n	8006942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800697a:	2b01      	cmp	r3, #1
 800697c:	d118      	bne.n	80069b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	60bb      	str	r3, [r7, #8]
   return(result);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	647b      	str	r3, [r7, #68]	@ 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6979      	ldr	r1, [r7, #20]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	613b      	str	r3, [r7, #16]
   return(result);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069c4:	bf00      	nop
 80069c6:	3754      	adds	r7, #84	@ 0x54
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b09c      	sub	sp, #112	@ 0x70
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e6:	d071      	beq.n	8006acc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80069e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e6      	bne.n	80069f0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a42:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d118      	bne.n	8006acc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f023 0310 	bic.w	r3, r3, #16
 8006aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6979      	ldr	r1, [r7, #20]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e6      	bne.n	8006a9a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ace:	2200      	movs	r2, #0
 8006ad0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d122      	bne.n	8006b20 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8006ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8006aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006af2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d204      	bcs.n	8006b04 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8006b00:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	4619      	mov	r1, r3
 8006b18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b1a:	f7ff fa06 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1e:	e002      	b.n	8006b26 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8006b20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b22:	f7ff f9e4 	bl	8005eee <HAL_UART_RxCpltCallback>
}
 8006b26:	bf00      	nop
 8006b28:	3770      	adds	r7, #112	@ 0x70
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d123      	bne.n	8006b92 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b68:	897a      	ldrh	r2, [r7, #10]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	897a      	ldrh	r2, [r7, #10]
 8006b72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff f9cd 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b90:	e002      	b.n	8006b98 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff f9b5 	bl	8005f02 <HAL_UART_RxHalfCpltCallback>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc6:	2b80      	cmp	r3, #128	@ 0x80
 8006bc8:	d109      	bne.n	8006bde <UART_DMAError+0x3e>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b21      	cmp	r3, #33	@ 0x21
 8006bce:	d106      	bne.n	8006bde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006bd8:	6978      	ldr	r0, [r7, #20]
 8006bda:	f7ff fe6f 	bl	80068bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	d109      	bne.n	8006c00 <UART_DMAError+0x60>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b22      	cmp	r3, #34	@ 0x22
 8006bf0:	d106      	bne.n	8006c00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7ff fe84 	bl	8006908 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	f7ff f980 	bl	8005f16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c20:	b084      	sub	sp, #16
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	f107 001c 	add.w	r0, r7, #28
 8006c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d121      	bne.n	8006c7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	4b21      	ldr	r3, [pc, #132]	@ (8006cd0 <USB_CoreInit+0xb0>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa92 	bl	800719c <USB_CoreReset>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e010      	b.n	8006ca0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa86 	bl	800719c <USB_CoreReset>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ca0:	7fbb      	ldrb	r3, [r7, #30]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10b      	bne.n	8006cbe <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f043 0206 	orr.w	r2, r3, #6
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cca:	b004      	add	sp, #16
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	ffbdffbf 	.word	0xffbdffbf

08006cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f023 0201 	bic.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d115      	bne.n	8006d44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d24:	200a      	movs	r0, #10
 8006d26:	f7fa fd63 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	330a      	adds	r3, #10
 8006d2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa25 	bl	8007180 <USB_GetMode>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d01e      	beq.n	8006d7a <USB_SetCurrentMode+0x84>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d40:	d9f0      	bls.n	8006d24 <USB_SetCurrentMode+0x2e>
 8006d42:	e01a      	b.n	8006d7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d115      	bne.n	8006d76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d56:	200a      	movs	r0, #10
 8006d58:	f7fa fd4a 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	330a      	adds	r3, #10
 8006d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa0c 	bl	8007180 <USB_GetMode>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <USB_SetCurrentMode+0x84>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d72:	d9f0      	bls.n	8006d56 <USB_SetCurrentMode+0x60>
 8006d74:	e001      	b.n	8006d7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e005      	b.n	8006d86 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d7e:	d101      	bne.n	8006d84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d90:	b084      	sub	sp, #16
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e009      	b.n	8006dc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3340      	adds	r3, #64	@ 0x40
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b0e      	cmp	r3, #14
 8006dc8:	d9f2      	bls.n	8006db0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11c      	bne.n	8006e0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e005      	b.n	8006e18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10d      	bne.n	8006e48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f968 	bl	800710c <USB_SetDevSpeed>
 8006e3c:	e008      	b.n	8006e50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e3e:	2101      	movs	r1, #1
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f963 	bl	800710c <USB_SetDevSpeed>
 8006e46:	e003      	b.n	8006e50 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e48:	2103      	movs	r1, #3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f95e 	bl	800710c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e50:	2110      	movs	r1, #16
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8fa 	bl	800704c <USB_FlushTxFifo>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f924 	bl	80070b0 <USB_FlushRxFifo>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e90:	461a      	mov	r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	e043      	b.n	8006f24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eb2:	d118      	bne.n	8006ee6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	e013      	b.n	8006ef8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006edc:	461a      	mov	r2, r3
 8006ede:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	e008      	b.n	8006ef8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f04:	461a      	mov	r2, r3
 8006f06:	2300      	movs	r3, #0
 8006f08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f16:	461a      	mov	r2, r3
 8006f18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f28:	461a      	mov	r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d3b5      	bcc.n	8006e9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	e043      	b.n	8006fbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f4c:	d118      	bne.n	8006f80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f60:	461a      	mov	r2, r3
 8006f62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e013      	b.n	8006f92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e008      	b.n	8006f92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d3b5      	bcc.n	8006f36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f043 0210 	orr.w	r2, r3, #16
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	4b0f      	ldr	r3, [pc, #60]	@ (8007044 <USB_DevInit+0x2b4>)
 8007006:	4313      	orrs	r3, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800700c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f043 0208 	orr.w	r2, r3, #8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007020:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007024:	2b01      	cmp	r3, #1
 8007026:	d105      	bne.n	8007034 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <USB_DevInit+0x2b8>)
 800702e:	4313      	orrs	r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007040:	b004      	add	sp, #16
 8007042:	4770      	bx	lr
 8007044:	803c3800 	.word	0x803c3800
 8007048:	40000004 	.word	0x40000004

0800704c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007066:	d901      	bls.n	800706c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e01b      	b.n	80070a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	daf2      	bge.n	800705a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	019b      	lsls	r3, r3, #6
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007090:	d901      	bls.n	8007096 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e006      	b.n	80070a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d0f0      	beq.n	8007084 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3301      	adds	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c8:	d901      	bls.n	80070ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e018      	b.n	8007100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	daf2      	bge.n	80070bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2210      	movs	r2, #16
 80070de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ec:	d901      	bls.n	80070f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e006      	b.n	8007100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d0f0      	beq.n	80070e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800712c:	4313      	orrs	r3, r2
 800712e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	f003 0301 	and.w	r3, r3, #1
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b4:	d901      	bls.n	80071ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e022      	b.n	8007200 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	daf2      	bge.n	80071a8 <USB_CoreReset+0xc>

  count = 10U;
 80071c2:	230a      	movs	r3, #10
 80071c4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80071c6:	e002      	b.n	80071ce <USB_CoreReset+0x32>
  {
    count--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f9      	bne.n	80071c8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f043 0201 	orr.w	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ec:	d901      	bls.n	80071f2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e006      	b.n	8007200 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d0f0      	beq.n	80071e0 <USB_CoreReset+0x44>

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
	uartInit();
 8007210:	f000 fa1e 	bl	8007650 <uartInit>
	fanInit();
 8007214:	f000 f86c 	bl	80072f0 <fanInit>
	fan_rpm_Init();
 8007218:	f000 f90e 	bl	8007438 <fan_rpm_Init>
	fan_Start();
 800721c:	f000 f914 	bl	8007448 <fan_Start>
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}

08007224 <setDutyAndReset>:
static void setDutyAndReset(uint16_t duty)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	80fb      	strh	r3, [r7, #6]
	fanSetDuty(duty);   // 0~999 스케일 가정
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f899 	bl	8007368 <fanSetDuty>
	TACH_Reset();       // 듀티 급변/정지 후 반드시 리셋
 8007236:	f000 f913 	bl	8007460 <TACH_Reset>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <apMain>:

void apMain(void)
{
 8007244:	b590      	push	{r4, r7, lr}
 8007246:	b089      	sub	sp, #36	@ 0x24
 8007248:	af02      	add	r7, sp, #8
  uint16_t duty[] = {0, 250, 500, 750, 999};
 800724a:	4a25      	ldr	r2, [pc, #148]	@ (80072e0 <apMain+0x9c>)
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007250:	c303      	stmia	r3!, {r0, r1}
 8007252:	801a      	strh	r2, [r3, #0]
  uint8_t i = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	75fb      	strb	r3, [r7, #23]

  while (1)
  {
    setDutyAndReset(duty[i]);
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	3318      	adds	r3, #24
 800725e:	443b      	add	r3, r7
 8007260:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ffdd 	bl	8007224 <setDutyAndReset>
    HAL_Delay(300); // 워밍업
 800726a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800726e:	f7fa fabf 	bl	80017f0 <HAL_Delay>

    uint32_t rpm100 = fan_GetRPMx100();
 8007272:	f000 f931 	bl	80074d8 <fan_GetRPMx100>
 8007276:	6138      	str	r0, [r7, #16]
    uartPrintf(_DEF_CH1, "Duty:%u%%  RPM:%lu.%02lu\r\n",
               (duty[i]*100)/999, rpm100/100, rpm100%100);
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	3318      	adds	r3, #24
 800727e:	443b      	add	r3, r7
 8007280:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007284:	461a      	mov	r2, r3
 8007286:	2364      	movs	r3, #100	@ 0x64
 8007288:	fb02 f303 	mul.w	r3, r2, r3
    uartPrintf(_DEF_CH1, "Duty:%u%%  RPM:%lu.%02lu\r\n",
 800728c:	4a15      	ldr	r2, [pc, #84]	@ (80072e4 <apMain+0xa0>)
 800728e:	fb82 1203 	smull	r1, r2, r2, r3
 8007292:	441a      	add	r2, r3
 8007294:	1252      	asrs	r2, r2, #9
 8007296:	17db      	asrs	r3, r3, #31
 8007298:	1ad1      	subs	r1, r2, r3
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4a12      	ldr	r2, [pc, #72]	@ (80072e8 <apMain+0xa4>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0958      	lsrs	r0, r3, #5
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4b10      	ldr	r3, [pc, #64]	@ (80072e8 <apMain+0xa4>)
 80072a8:	fba3 4302 	umull	r4, r3, r3, r2
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	2464      	movs	r4, #100	@ 0x64
 80072b0:	fb04 f303 	mul.w	r3, r4, r3
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	460a      	mov	r2, r1
 80072bc:	490b      	ldr	r1, [pc, #44]	@ (80072ec <apMain+0xa8>)
 80072be:	2000      	movs	r0, #0
 80072c0:	f000 f9f8 	bl	80076b4 <uartPrintf>

    HAL_Delay(5000);
 80072c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80072c8:	f7fa fa92 	bl	80017f0 <HAL_Delay>
    if (++i >= sizeof(duty)/sizeof(duty[0])) i = 0;
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	3301      	adds	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d9bf      	bls.n	8007258 <apMain+0x14>
 80072d8:	2300      	movs	r3, #0
 80072da:	75fb      	strb	r3, [r7, #23]
  {
 80072dc:	e7bc      	b.n	8007258 <apMain+0x14>
 80072de:	bf00      	nop
 80072e0:	080080d0 	.word	0x080080d0
 80072e4:	83340521 	.word	0x83340521
 80072e8:	51eb851f 	.word	0x51eb851f
 80072ec:	080080b4 	.word	0x080080b4

080072f0 <fanInit>:

#include <Heating Module hed/fan.h>
#include "uart.h"

bool fanInit(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af02      	add	r7, sp, #8
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80072f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007360 <fanInit+0x70>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->PSC = 2159;
 80072fe:	4b18      	ldr	r3, [pc, #96]	@ (8007360 <fanInit+0x70>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f640 026f 	movw	r2, #2159	@ 0x86f
 8007306:	629a      	str	r2, [r3, #40]	@ 0x28
  htim3.Instance->ARR = 999;
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <fanInit+0x70>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007310:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8007312:	4b13      	ldr	r3, [pc, #76]	@ (8007360 <fanInit+0x70>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800731a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800731c:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <fanInit+0x70>)
 800731e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007322:	60da      	str	r2, [r3, #12]
  bool ret = (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) == HAL_OK);
 8007324:	2100      	movs	r1, #0
 8007326:	480e      	ldr	r0, [pc, #56]	@ (8007360 <fanInit+0x70>)
 8007328:	f7fd f81e 	bl	8004368 <HAL_TIM_PWM_Start>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	71fb      	strb	r3, [r7, #7]
  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fc fa62 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 800733c:	6038      	str	r0, [r7, #0]
  uartPrintf(_DEF_CH1, "Fan Init: %d, ARR: %d, PCLK1: %d\r\n", ret, __HAL_TIM_GET_AUTORELOAD(&htim3), pclk1);
 800733e:	79fa      	ldrb	r2, [r7, #7]
 8007340:	4b07      	ldr	r3, [pc, #28]	@ (8007360 <fanInit+0x70>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	460b      	mov	r3, r1
 800734c:	4905      	ldr	r1, [pc, #20]	@ (8007364 <fanInit+0x74>)
 800734e:	2000      	movs	r0, #0
 8007350:	f000 f9b0 	bl	80076b4 <uartPrintf>
  return ret;
 8007354:	79fb      	ldrb	r3, [r7, #7]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200003b4 	.word	0x200003b4
 8007364:	080080dc 	.word	0x080080dc

08007368 <fanSetDuty>:

void fanSetDuty(uint16_t duty1000)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af02      	add	r7, sp, #8
 800736e:	4603      	mov	r3, r0
 8007370:	80fb      	strh	r3, [r7, #6]
  if (duty1000 > (PWM_DUTY_STEPS - 1)) duty1000 = (PWM_DUTY_STEPS - 1);
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007378:	d302      	bcc.n	8007380 <fanSetDuty+0x18>
 800737a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800737e:	80fb      	strh	r3, [r7, #6]
  uint16_t min_cut = (uint16_t)(PWM_DUTY_STEPS * PWM_DUTY_MIN_FRAC + 0.5f);
 8007380:	2314      	movs	r3, #20
 8007382:	82fb      	strh	r3, [r7, #22]
  if (duty1000 < min_cut) duty1000 = 0;
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	8afb      	ldrh	r3, [r7, #22]
 8007388:	429a      	cmp	r2, r3
 800738a:	d201      	bcs.n	8007390 <fanSetDuty+0x28>
 800738c:	2300      	movs	r3, #0
 800738e:	80fb      	strh	r3, [r7, #6]
  uint32_t arr = 999; // 고정값 사용
 8007390:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8007394:	613b      	str	r3, [r7, #16]
  uint32_t ccr = ((uint32_t)duty1000 * arr + (PWM_DUTY_STEPS / 2)) / PWM_DUTY_STEPS;
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	fb02 f303 	mul.w	r3, r2, r3
 800739e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80073a2:	4a0a      	ldr	r2, [pc, #40]	@ (80073cc <fanSetDuty+0x64>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	099b      	lsrs	r3, r3, #6
 80073aa:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ccr);
 80073ac:	4b08      	ldr	r3, [pc, #32]	@ (80073d0 <fanSetDuty+0x68>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	635a      	str	r2, [r3, #52]	@ 0x34
  uartPrintf(_DEF_CH1, "Duty Set: %d, CCR: %d, ARR: %d\r\n", duty1000, ccr, arr);
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4905      	ldr	r1, [pc, #20]	@ (80073d4 <fanSetDuty+0x6c>)
 80073be:	2000      	movs	r0, #0
 80073c0:	f000 f978 	bl	80076b4 <uartPrintf>
}
 80073c4:	bf00      	nop
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	10624dd3 	.word	0x10624dd3
 80073d0:	200003b4 	.word	0x200003b4
 80073d4:	08008100 	.word	0x08008100

080073d8 <avg_diff_ticks>:
static volatile uint32_t rpm_x100 = 0;
static volatile uint32_t last_update_ms = 0;

/* ===== 유틸 ===== */
static inline uint32_t avg_diff_ticks(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
  uint32_t sum = 0; uint8_t n = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	607b      	str	r3, [r7, #4]
 80073e2:	2300      	movs	r3, #0
 80073e4:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i=0; i<AVG_WINDOW; i++){
 80073e6:	2300      	movs	r3, #0
 80073e8:	70bb      	strb	r3, [r7, #2]
 80073ea:	e011      	b.n	8007410 <avg_diff_ticks+0x38>
    uint16_t d = diff_buf[i];
 80073ec:	78bb      	ldrb	r3, [r7, #2]
 80073ee:	4a11      	ldr	r2, [pc, #68]	@ (8007434 <avg_diff_ticks+0x5c>)
 80073f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f4:	803b      	strh	r3, [r7, #0]
    if (d){ sum += d; n++; }
 80073f6:	883b      	ldrh	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <avg_diff_ticks+0x32>
 80073fc:	883b      	ldrh	r3, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4413      	add	r3, r2
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	3301      	adds	r3, #1
 8007408:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i=0; i<AVG_WINDOW; i++){
 800740a:	78bb      	ldrb	r3, [r7, #2]
 800740c:	3301      	adds	r3, #1
 800740e:	70bb      	strb	r3, [r7, #2]
 8007410:	78bb      	ldrb	r3, [r7, #2]
 8007412:	2b07      	cmp	r3, #7
 8007414:	d9ea      	bls.n	80073ec <avg_diff_ticks+0x14>
  }
  return n ? (sum / n) : 0;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <avg_diff_ticks+0x4e>
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	fbb2 f3f3 	udiv	r3, r2, r3
 8007424:	e000      	b.n	8007428 <avg_diff_ticks+0x50>
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20000a28 	.word	0x20000a28

08007438 <fan_rpm_Init>:

/* ===== API ===== */
void fan_rpm_Init(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  // Cube가 MX_TIM9_Init 생성했다면 여기서 호출해도 되고, 비워둬도 됩니다.
  // MX_TIM9_Init();
}
 800743c:	bf00      	nop
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <fan_Start>:

void fan_Start(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  TACH_Reset();
 800744c:	f000 f808 	bl	8007460 <TACH_Reset>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8007450:	2100      	movs	r1, #0
 8007452:	4802      	ldr	r0, [pc, #8]	@ (800745c <fan_Start+0x14>)
 8007454:	f7fd f8da 	bl	800460c <HAL_TIM_IC_Start_IT>
}
 8007458:	bf00      	nop
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000400 	.word	0x20000400

08007460 <TACH_Reset>:

void TACH_Reset(void)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007466:	b672      	cpsid	i
}
 8007468:	bf00      	nop
  __disable_irq();
  primed = 0;
 800746a:	4b14      	ldr	r3, [pc, #80]	@ (80074bc <TACH_Reset+0x5c>)
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
  last_cc = 0;
 8007470:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <TACH_Reset+0x60>)
 8007472:	2200      	movs	r2, #0
 8007474:	801a      	strh	r2, [r3, #0]
  diff_idx = 0;
 8007476:	4b13      	ldr	r3, [pc, #76]	@ (80074c4 <TACH_Reset+0x64>)
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0;i<AVG_WINDOW;i++) diff_buf[i]=0;
 800747c:	2300      	movs	r3, #0
 800747e:	71fb      	strb	r3, [r7, #7]
 8007480:	e007      	b.n	8007492 <TACH_Reset+0x32>
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	4a10      	ldr	r2, [pc, #64]	@ (80074c8 <TACH_Reset+0x68>)
 8007486:	2100      	movs	r1, #0
 8007488:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	3301      	adds	r3, #1
 8007490:	71fb      	strb	r3, [r7, #7]
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	2b07      	cmp	r3, #7
 8007496:	d9f4      	bls.n	8007482 <TACH_Reset+0x22>
  warmup_left = WARMUP_DISCARD;
 8007498:	4b0c      	ldr	r3, [pc, #48]	@ (80074cc <TACH_Reset+0x6c>)
 800749a:	2203      	movs	r2, #3
 800749c:	701a      	strb	r2, [r3, #0]
  rpm_x100 = 0;
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <TACH_Reset+0x70>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
  last_update_ms = 0;
 80074a4:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <TACH_Reset+0x74>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80074aa:	b662      	cpsie	i
}
 80074ac:	bf00      	nop
  __enable_irq();
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000a26 	.word	0x20000a26
 80074c0:	20000a24 	.word	0x20000a24
 80074c4:	20000a38 	.word	0x20000a38
 80074c8:	20000a28 	.word	0x20000a28
 80074cc:	20000a39 	.word	0x20000a39
 80074d0:	20000a3c 	.word	0x20000a3c
 80074d4:	20000a40 	.word	0x20000a40

080074d8 <fan_GetRPMx100>:

uint32_t fan_GetRPMx100(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
  uint32_t now = HAL_GetTick();
 80074de:	f7fa f97b 	bl	80017d8 <HAL_GetTick>
 80074e2:	6078      	str	r0, [r7, #4]

  // 타임아웃 or 아직 측정 전이라면 무조건 0
  if (last_update_ms == 0 || (now - last_update_ms) > ZERO_TIMEOUT_MS)
 80074e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <fan_GetRPMx100+0x38>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <fan_GetRPMx100+0x22>
 80074ec:	4b08      	ldr	r3, [pc, #32]	@ (8007510 <fan_GetRPMx100+0x38>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80074f8:	d904      	bls.n	8007504 <fan_GetRPMx100+0x2c>
  {
    rpm_x100 = 0;   // ★ 내부 상태도 0으로 덮기
 80074fa:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <fan_GetRPMx100+0x3c>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
    return 0;
 8007500:	2300      	movs	r3, #0
 8007502:	e001      	b.n	8007508 <fan_GetRPMx100+0x30>
  }

  return rpm_x100;
 8007504:	4b03      	ldr	r3, [pc, #12]	@ (8007514 <fan_GetRPMx100+0x3c>)
 8007506:	681b      	ldr	r3, [r3, #0]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000a40 	.word	0x20000a40
 8007514:	20000a3c 	.word	0x20000a3c

08007518 <HAL_TIM_IC_CaptureCallback>:
   extern TIM_HandleTypeDef htim9;
   void TIM1_BRK_TIM9_IRQHandler(void){ HAL_TIM_IRQHandler(&htim9); }
*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  if (htim->Instance != TIM9 || htim->Channel != HAL_TIM_ACTIVE_CHANNEL_1) return;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a41      	ldr	r2, [pc, #260]	@ (800762c <HAL_TIM_IC_CaptureCallback+0x114>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d178      	bne.n	800761e <HAL_TIM_IC_CaptureCallback+0x106>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7f1b      	ldrb	r3, [r3, #28]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d174      	bne.n	800761e <HAL_TIM_IC_CaptureCallback+0x106>

  uint16_t now = (uint16_t)HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fd fd3a 	bl	8004fb0 <HAL_TIM_ReadCapturedValue>
 800753c:	4603      	mov	r3, r0
 800753e:	82fb      	strh	r3, [r7, #22]

  if (!primed){ primed = 1; last_cc = now; return; }  // 첫 샘플 버림
 8007540:	4b3b      	ldr	r3, [pc, #236]	@ (8007630 <HAL_TIM_IC_CaptureCallback+0x118>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_TIM_IC_CaptureCallback+0x40>
 800754a:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <HAL_TIM_IC_CaptureCallback+0x118>)
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	4a38      	ldr	r2, [pc, #224]	@ (8007634 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8007552:	8afb      	ldrh	r3, [r7, #22]
 8007554:	8013      	strh	r3, [r2, #0]
 8007556:	e065      	b.n	8007624 <HAL_TIM_IC_CaptureCallback+0x10c>

  uint16_t diff = (now >= last_cc) ? (now - last_cc)
 8007558:	4b36      	ldr	r3, [pc, #216]	@ (8007634 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	8afa      	ldrh	r2, [r7, #22]
 8007560:	429a      	cmp	r2, r3
 8007562:	d306      	bcc.n	8007572 <HAL_TIM_IC_CaptureCallback+0x5a>
 8007564:	4b33      	ldr	r3, [pc, #204]	@ (8007634 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	8afa      	ldrh	r2, [r7, #22]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	b29b      	uxth	r3, r3
 8007570:	e005      	b.n	800757e <HAL_TIM_IC_CaptureCallback+0x66>
                                   : (uint16_t)(0x10000u - last_cc + now); // 16bit wrap
 8007572:	4b30      	ldr	r3, [pc, #192]	@ (8007634 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
  uint16_t diff = (now >= last_cc) ? (now - last_cc)
 8007578:	8afa      	ldrh	r2, [r7, #22]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	b29b      	uxth	r3, r3
 800757e:	82bb      	strh	r3, [r7, #20]
  last_cc = now;
 8007580:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8007582:	8afb      	ldrh	r3, [r7, #22]
 8007584:	8013      	strh	r3, [r2, #0]

  if (diff < MIN_DIFF_TICKS || diff > MAX_DIFF_TICKS) return; // 이상치 컷
 8007586:	8abb      	ldrh	r3, [r7, #20]
 8007588:	2b04      	cmp	r3, #4
 800758a:	d94a      	bls.n	8007622 <HAL_TIM_IC_CaptureCallback+0x10a>
 800758c:	8abb      	ldrh	r3, [r7, #20]
 800758e:	f64f 72fa 	movw	r2, #65530	@ 0xfffa
 8007592:	4293      	cmp	r3, r2
 8007594:	d845      	bhi.n	8007622 <HAL_TIM_IC_CaptureCallback+0x10a>
  if (warmup_left){ warmup_left--; return; }                  // 초기 N펄스 무시
 8007596:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <HAL_TIM_IC_CaptureCallback+0x120>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <HAL_TIM_IC_CaptureCallback+0x98>
 80075a0:	4b25      	ldr	r3, [pc, #148]	@ (8007638 <HAL_TIM_IC_CaptureCallback+0x120>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4b23      	ldr	r3, [pc, #140]	@ (8007638 <HAL_TIM_IC_CaptureCallback+0x120>)
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e039      	b.n	8007624 <HAL_TIM_IC_CaptureCallback+0x10c>

  diff_buf[diff_idx++] = diff;
 80075b0:	4b22      	ldr	r3, [pc, #136]	@ (800763c <HAL_TIM_IC_CaptureCallback+0x124>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	b2d1      	uxtb	r1, r2
 80075ba:	4a20      	ldr	r2, [pc, #128]	@ (800763c <HAL_TIM_IC_CaptureCallback+0x124>)
 80075bc:	7011      	strb	r1, [r2, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007640 <HAL_TIM_IC_CaptureCallback+0x128>)
 80075c2:	8abb      	ldrh	r3, [r7, #20]
 80075c4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
  if (diff_idx >= AVG_WINDOW) diff_idx = 0;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <HAL_TIM_IC_CaptureCallback+0x124>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b07      	cmp	r3, #7
 80075d0:	d902      	bls.n	80075d8 <HAL_TIM_IC_CaptureCallback+0xc0>
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <HAL_TIM_IC_CaptureCallback+0x124>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]

  uint32_t d = avg_diff_ticks();          // tick(0.1ms) 단위
 80075d8:	f7ff fefe 	bl	80073d8 <avg_diff_ticks>
 80075dc:	6138      	str	r0, [r7, #16]
  if (d){
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01f      	beq.n	8007624 <HAL_TIM_IC_CaptureCallback+0x10c>
    // RPM*100 = (60*100*TICK_HZ) / (PPR * d)
    uint64_t num = (uint64_t)60u * 100u * (uint64_t)TICK_HZ;  // 6,000,000,000
 80075e4:	4a17      	ldr	r2, [pc, #92]	@ (8007644 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    rpm_x100 = (uint32_t)(num / ((uint64_t)TACH_PPR * (uint64_t)d));
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2200      	movs	r2, #0
 80075f2:	461c      	mov	r4, r3
 80075f4:	4615      	mov	r5, r2
 80075f6:	eb14 0804 	adds.w	r8, r4, r4
 80075fa:	eb45 0905 	adc.w	r9, r5, r5
 80075fe:	4642      	mov	r2, r8
 8007600:	464b      	mov	r3, r9
 8007602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007606:	f7f8 fe6b 	bl	80002e0 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <HAL_TIM_IC_CaptureCallback+0x130>)
 8007610:	601a      	str	r2, [r3, #0]
    last_update_ms = HAL_GetTick();
 8007612:	f7fa f8e1 	bl	80017d8 <HAL_GetTick>
 8007616:	4603      	mov	r3, r0
 8007618:	4a0c      	ldr	r2, [pc, #48]	@ (800764c <HAL_TIM_IC_CaptureCallback+0x134>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e002      	b.n	8007624 <HAL_TIM_IC_CaptureCallback+0x10c>
  if (htim->Instance != TIM9 || htim->Channel != HAL_TIM_ACTIVE_CHANNEL_1) return;
 800761e:	bf00      	nop
 8007620:	e000      	b.n	8007624 <HAL_TIM_IC_CaptureCallback+0x10c>
  if (diff < MIN_DIFF_TICKS || diff > MAX_DIFF_TICKS) return; // 이상치 컷
 8007622:	bf00      	nop
  }
}
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800762c:	40014000 	.word	0x40014000
 8007630:	20000a26 	.word	0x20000a26
 8007634:	20000a24 	.word	0x20000a24
 8007638:	20000a39 	.word	0x20000a39
 800763c:	20000a38 	.word	0x20000a38
 8007640:	20000a28 	.word	0x20000a28
 8007644:	03938700 	.word	0x03938700
 8007648:	20000a3c 	.word	0x20000a3c
 800764c:	20000a40 	.word	0x20000a40

08007650 <uartInit>:
static uint8_t q_buf[UART_Q_BUF_MAX];
//static uint8_t q_data; [인터럽트 시 사용]


bool uartInit()
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
//	HAL_UART_Receive_IT(&huart3, &q_data, 1);		// size를 1로 해야 1byte마다 한번씩 인터럽트가 걸림.
	HAL_UART_Receive_DMA(&huart3, &q_buf[0], UART_Q_BUF_MAX);
 8007654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007658:	4903      	ldr	r1, [pc, #12]	@ (8007668 <uartInit+0x18>)
 800765a:	4804      	ldr	r0, [pc, #16]	@ (800766c <uartInit+0x1c>)
 800765c:	f7fe fc03 	bl	8005e66 <HAL_UART_Receive_DMA>
	return true;
 8007660:	2301      	movs	r3, #1
}
 8007662:	4618      	mov	r0, r3
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000a44 	.word	0x20000a44
 800766c:	2000044c 	.word	0x2000044c

08007670 <uartWrite>:

// 2. uart 송출용 코드
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	73fb      	strb	r3, [r7, #15]
	uint32_t ret = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef hal_ret;
	switch(ch)
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <uartWrite+0x36>
	{
		case _DEF_CH1:
		hal_ret = HAL_UART_Transmit(&huart3, p_data, length, 100);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	b29a      	uxth	r2, r3
 800768c:	2364      	movs	r3, #100	@ 0x64
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	4807      	ldr	r0, [pc, #28]	@ (80076b0 <uartWrite+0x40>)
 8007692:	f7fe fb5f 	bl	8005d54 <HAL_UART_Transmit>
 8007696:	4603      	mov	r3, r0
 8007698:	74fb      	strb	r3, [r7, #19]
		if (hal_ret == HAL_OK)
 800769a:	7cfb      	ldrb	r3, [r7, #19]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <uartWrite+0x34>
		{
			ret = length;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	617b      	str	r3, [r7, #20]
		}
		break;
 80076a4:	bf00      	nop
	}
	return ret;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	2000044c 	.word	0x2000044c

080076b4 <uartPrintf>:
	return ret;
}


uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b0c7      	sub	sp, #284	@ 0x11c
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	4602      	mov	r2, r0
 80076be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80076c2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80076c6:	701a      	strb	r2, [r3, #0]
	uint32_t ret =0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 80076ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80076d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);	// 버퍼 이름, 갯수, 포맷 지정자, 값
 80076d6:	f107 000c 	add.w	r0, r7, #12
 80076da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80076e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076e6:	f000 f84d 	bl	8007784 <vsniprintf>
 80076ea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	va_end(arg);

	if (len > 0)	// 데이터가 있다면~
 80076ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dd0d      	ble.n	8007712 <uartPrintf+0x5e>
	{
		ret =  uartWrite(ch,(uint8_t*)print_buf, len);
 80076f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80076fa:	f107 010c 	add.w	r1, r7, #12
 80076fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007702:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ffb1 	bl	8007670 <uartWrite>
 800770e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	}
	return ret;
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 8007716:	4618      	mov	r0, r3
 8007718:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800771c:	46bd      	mov	sp, r7
 800771e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007722:	b003      	add	sp, #12
 8007724:	4770      	bx	lr

08007726 <_vsniprintf_r>:
 8007726:	b530      	push	{r4, r5, lr}
 8007728:	4614      	mov	r4, r2
 800772a:	2c00      	cmp	r4, #0
 800772c:	b09b      	sub	sp, #108	@ 0x6c
 800772e:	4605      	mov	r5, r0
 8007730:	461a      	mov	r2, r3
 8007732:	da05      	bge.n	8007740 <_vsniprintf_r+0x1a>
 8007734:	238b      	movs	r3, #139	@ 0x8b
 8007736:	6003      	str	r3, [r0, #0]
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b01b      	add	sp, #108	@ 0x6c
 800773e:	bd30      	pop	{r4, r5, pc}
 8007740:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007744:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	9319      	str	r3, [sp, #100]	@ 0x64
 800774e:	bf14      	ite	ne
 8007750:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007754:	4623      	moveq	r3, r4
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800775e:	9100      	str	r1, [sp, #0]
 8007760:	9104      	str	r1, [sp, #16]
 8007762:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007766:	4669      	mov	r1, sp
 8007768:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800776a:	f000 f9a1 	bl	8007ab0 <_svfiprintf_r>
 800776e:	1c43      	adds	r3, r0, #1
 8007770:	bfbc      	itt	lt
 8007772:	238b      	movlt	r3, #139	@ 0x8b
 8007774:	602b      	strlt	r3, [r5, #0]
 8007776:	2c00      	cmp	r4, #0
 8007778:	d0e0      	beq.n	800773c <_vsniprintf_r+0x16>
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	e7dc      	b.n	800773c <_vsniprintf_r+0x16>
	...

08007784 <vsniprintf>:
 8007784:	b507      	push	{r0, r1, r2, lr}
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	460a      	mov	r2, r1
 800778c:	4601      	mov	r1, r0
 800778e:	4803      	ldr	r0, [pc, #12]	@ (800779c <vsniprintf+0x18>)
 8007790:	6800      	ldr	r0, [r0, #0]
 8007792:	f7ff ffc8 	bl	8007726 <_vsniprintf_r>
 8007796:	b003      	add	sp, #12
 8007798:	f85d fb04 	ldr.w	pc, [sp], #4
 800779c:	2000000c 	.word	0x2000000c

080077a0 <memset>:
 80077a0:	4402      	add	r2, r0
 80077a2:	4603      	mov	r3, r0
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d100      	bne.n	80077aa <memset+0xa>
 80077a8:	4770      	bx	lr
 80077aa:	f803 1b01 	strb.w	r1, [r3], #1
 80077ae:	e7f9      	b.n	80077a4 <memset+0x4>

080077b0 <__errno>:
 80077b0:	4b01      	ldr	r3, [pc, #4]	@ (80077b8 <__errno+0x8>)
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	2000000c 	.word	0x2000000c

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4d0d      	ldr	r5, [pc, #52]	@ (80077f4 <__libc_init_array+0x38>)
 80077c0:	4c0d      	ldr	r4, [pc, #52]	@ (80077f8 <__libc_init_array+0x3c>)
 80077c2:	1b64      	subs	r4, r4, r5
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	2600      	movs	r6, #0
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	4d0b      	ldr	r5, [pc, #44]	@ (80077fc <__libc_init_array+0x40>)
 80077ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007800 <__libc_init_array+0x44>)
 80077d0:	f000 fc64 	bl	800809c <_init>
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	2600      	movs	r6, #0
 80077da:	42a6      	cmp	r6, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e4:	4798      	blx	r3
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ee:	4798      	blx	r3
 80077f0:	3601      	adds	r6, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	08008180 	.word	0x08008180
 80077f8:	08008180 	.word	0x08008180
 80077fc:	08008180 	.word	0x08008180
 8007800:	08008184 	.word	0x08008184

08007804 <__retarget_lock_acquire_recursive>:
 8007804:	4770      	bx	lr

08007806 <__retarget_lock_release_recursive>:
 8007806:	4770      	bx	lr

08007808 <_free_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	d041      	beq.n	8007894 <_free_r+0x8c>
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	18e4      	addlt	r4, r4, r3
 800781c:	f000 f8e0 	bl	80079e0 <__malloc_lock>
 8007820:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <_free_r+0x90>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x2c>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	4628      	mov	r0, r5
 800782c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007830:	f000 b8dc 	b.w	80079ec <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x42>
 8007838:	6820      	ldr	r0, [r4, #0]
 800783a:	1821      	adds	r1, r4, r0
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1809      	addeq	r1, r1, r0
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x1e>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x4c>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x42>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1850      	adds	r0, r2, r1
 8007858:	42a0      	cmp	r0, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x6c>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4401      	add	r1, r0
 8007860:	1850      	adds	r0, r2, r1
 8007862:	4283      	cmp	r3, r0
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x22>
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	6053      	str	r3, [r2, #4]
 800786e:	4408      	add	r0, r1
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	e7da      	b.n	800782a <_free_r+0x22>
 8007874:	d902      	bls.n	800787c <_free_r+0x74>
 8007876:	230c      	movs	r3, #12
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x22>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf04      	itt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	bf04      	itt	eq
 800788c:	1809      	addeq	r1, r1, r0
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	6054      	str	r4, [r2, #4]
 8007892:	e7ca      	b.n	800782a <_free_r+0x22>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	20000c88 	.word	0x20000c88

0800789c <sbrk_aligned>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4e0f      	ldr	r6, [pc, #60]	@ (80078dc <sbrk_aligned+0x40>)
 80078a0:	460c      	mov	r4, r1
 80078a2:	6831      	ldr	r1, [r6, #0]
 80078a4:	4605      	mov	r5, r0
 80078a6:	b911      	cbnz	r1, 80078ae <sbrk_aligned+0x12>
 80078a8:	f000 fba4 	bl	8007ff4 <_sbrk_r>
 80078ac:	6030      	str	r0, [r6, #0]
 80078ae:	4621      	mov	r1, r4
 80078b0:	4628      	mov	r0, r5
 80078b2:	f000 fb9f 	bl	8007ff4 <_sbrk_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d103      	bne.n	80078c2 <sbrk_aligned+0x26>
 80078ba:	f04f 34ff 	mov.w	r4, #4294967295
 80078be:	4620      	mov	r0, r4
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d0f8      	beq.n	80078be <sbrk_aligned+0x22>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 fb90 	bl	8007ff4 <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d1f2      	bne.n	80078be <sbrk_aligned+0x22>
 80078d8:	e7ef      	b.n	80078ba <sbrk_aligned+0x1e>
 80078da:	bf00      	nop
 80078dc:	20000c84 	.word	0x20000c84

080078e0 <_malloc_r>:
 80078e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	1ccd      	adds	r5, r1, #3
 80078e6:	f025 0503 	bic.w	r5, r5, #3
 80078ea:	3508      	adds	r5, #8
 80078ec:	2d0c      	cmp	r5, #12
 80078ee:	bf38      	it	cc
 80078f0:	250c      	movcc	r5, #12
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	4606      	mov	r6, r0
 80078f6:	db01      	blt.n	80078fc <_malloc_r+0x1c>
 80078f8:	42a9      	cmp	r1, r5
 80078fa:	d904      	bls.n	8007906 <_malloc_r+0x26>
 80078fc:	230c      	movs	r3, #12
 80078fe:	6033      	str	r3, [r6, #0]
 8007900:	2000      	movs	r0, #0
 8007902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079dc <_malloc_r+0xfc>
 800790a:	f000 f869 	bl	80079e0 <__malloc_lock>
 800790e:	f8d8 3000 	ldr.w	r3, [r8]
 8007912:	461c      	mov	r4, r3
 8007914:	bb44      	cbnz	r4, 8007968 <_malloc_r+0x88>
 8007916:	4629      	mov	r1, r5
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff ffbf 	bl	800789c <sbrk_aligned>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	4604      	mov	r4, r0
 8007922:	d158      	bne.n	80079d6 <_malloc_r+0xf6>
 8007924:	f8d8 4000 	ldr.w	r4, [r8]
 8007928:	4627      	mov	r7, r4
 800792a:	2f00      	cmp	r7, #0
 800792c:	d143      	bne.n	80079b6 <_malloc_r+0xd6>
 800792e:	2c00      	cmp	r4, #0
 8007930:	d04b      	beq.n	80079ca <_malloc_r+0xea>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	4639      	mov	r1, r7
 8007936:	4630      	mov	r0, r6
 8007938:	eb04 0903 	add.w	r9, r4, r3
 800793c:	f000 fb5a 	bl	8007ff4 <_sbrk_r>
 8007940:	4581      	cmp	r9, r0
 8007942:	d142      	bne.n	80079ca <_malloc_r+0xea>
 8007944:	6821      	ldr	r1, [r4, #0]
 8007946:	1a6d      	subs	r5, r5, r1
 8007948:	4629      	mov	r1, r5
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ffa6 	bl	800789c <sbrk_aligned>
 8007950:	3001      	adds	r0, #1
 8007952:	d03a      	beq.n	80079ca <_malloc_r+0xea>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	442b      	add	r3, r5
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	f8d8 3000 	ldr.w	r3, [r8]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	bb62      	cbnz	r2, 80079bc <_malloc_r+0xdc>
 8007962:	f8c8 7000 	str.w	r7, [r8]
 8007966:	e00f      	b.n	8007988 <_malloc_r+0xa8>
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	1b52      	subs	r2, r2, r5
 800796c:	d420      	bmi.n	80079b0 <_malloc_r+0xd0>
 800796e:	2a0b      	cmp	r2, #11
 8007970:	d917      	bls.n	80079a2 <_malloc_r+0xc2>
 8007972:	1961      	adds	r1, r4, r5
 8007974:	42a3      	cmp	r3, r4
 8007976:	6025      	str	r5, [r4, #0]
 8007978:	bf18      	it	ne
 800797a:	6059      	strne	r1, [r3, #4]
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	bf08      	it	eq
 8007980:	f8c8 1000 	streq.w	r1, [r8]
 8007984:	5162      	str	r2, [r4, r5]
 8007986:	604b      	str	r3, [r1, #4]
 8007988:	4630      	mov	r0, r6
 800798a:	f000 f82f 	bl	80079ec <__malloc_unlock>
 800798e:	f104 000b 	add.w	r0, r4, #11
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	f020 0007 	bic.w	r0, r0, #7
 8007998:	1ac2      	subs	r2, r0, r3
 800799a:	bf1c      	itt	ne
 800799c:	1a1b      	subne	r3, r3, r0
 800799e:	50a3      	strne	r3, [r4, r2]
 80079a0:	e7af      	b.n	8007902 <_malloc_r+0x22>
 80079a2:	6862      	ldr	r2, [r4, #4]
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	bf0c      	ite	eq
 80079a8:	f8c8 2000 	streq.w	r2, [r8]
 80079ac:	605a      	strne	r2, [r3, #4]
 80079ae:	e7eb      	b.n	8007988 <_malloc_r+0xa8>
 80079b0:	4623      	mov	r3, r4
 80079b2:	6864      	ldr	r4, [r4, #4]
 80079b4:	e7ae      	b.n	8007914 <_malloc_r+0x34>
 80079b6:	463c      	mov	r4, r7
 80079b8:	687f      	ldr	r7, [r7, #4]
 80079ba:	e7b6      	b.n	800792a <_malloc_r+0x4a>
 80079bc:	461a      	mov	r2, r3
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d1fb      	bne.n	80079bc <_malloc_r+0xdc>
 80079c4:	2300      	movs	r3, #0
 80079c6:	6053      	str	r3, [r2, #4]
 80079c8:	e7de      	b.n	8007988 <_malloc_r+0xa8>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 f80c 	bl	80079ec <__malloc_unlock>
 80079d4:	e794      	b.n	8007900 <_malloc_r+0x20>
 80079d6:	6005      	str	r5, [r0, #0]
 80079d8:	e7d6      	b.n	8007988 <_malloc_r+0xa8>
 80079da:	bf00      	nop
 80079dc:	20000c88 	.word	0x20000c88

080079e0 <__malloc_lock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	@ (80079e8 <__malloc_lock+0x8>)
 80079e2:	f7ff bf0f 	b.w	8007804 <__retarget_lock_acquire_recursive>
 80079e6:	bf00      	nop
 80079e8:	20000c80 	.word	0x20000c80

080079ec <__malloc_unlock>:
 80079ec:	4801      	ldr	r0, [pc, #4]	@ (80079f4 <__malloc_unlock+0x8>)
 80079ee:	f7ff bf0a 	b.w	8007806 <__retarget_lock_release_recursive>
 80079f2:	bf00      	nop
 80079f4:	20000c80 	.word	0x20000c80

080079f8 <__ssputs_r>:
 80079f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	688e      	ldr	r6, [r1, #8]
 80079fe:	461f      	mov	r7, r3
 8007a00:	42be      	cmp	r6, r7
 8007a02:	680b      	ldr	r3, [r1, #0]
 8007a04:	4682      	mov	sl, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4690      	mov	r8, r2
 8007a0a:	d82d      	bhi.n	8007a68 <__ssputs_r+0x70>
 8007a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a14:	d026      	beq.n	8007a64 <__ssputs_r+0x6c>
 8007a16:	6965      	ldr	r5, [r4, #20]
 8007a18:	6909      	ldr	r1, [r1, #16]
 8007a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a1e:	eba3 0901 	sub.w	r9, r3, r1
 8007a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a26:	1c7b      	adds	r3, r7, #1
 8007a28:	444b      	add	r3, r9
 8007a2a:	106d      	asrs	r5, r5, #1
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	bf38      	it	cc
 8007a30:	461d      	movcc	r5, r3
 8007a32:	0553      	lsls	r3, r2, #21
 8007a34:	d527      	bpl.n	8007a86 <__ssputs_r+0x8e>
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7ff ff52 	bl	80078e0 <_malloc_r>
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	b360      	cbz	r0, 8007a9a <__ssputs_r+0xa2>
 8007a40:	6921      	ldr	r1, [r4, #16]
 8007a42:	464a      	mov	r2, r9
 8007a44:	f000 fae6 	bl	8008014 <memcpy>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	6126      	str	r6, [r4, #16]
 8007a56:	6165      	str	r5, [r4, #20]
 8007a58:	444e      	add	r6, r9
 8007a5a:	eba5 0509 	sub.w	r5, r5, r9
 8007a5e:	6026      	str	r6, [r4, #0]
 8007a60:	60a5      	str	r5, [r4, #8]
 8007a62:	463e      	mov	r6, r7
 8007a64:	42be      	cmp	r6, r7
 8007a66:	d900      	bls.n	8007a6a <__ssputs_r+0x72>
 8007a68:	463e      	mov	r6, r7
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	4632      	mov	r2, r6
 8007a6e:	4641      	mov	r1, r8
 8007a70:	f000 faa6 	bl	8007fc0 <memmove>
 8007a74:	68a3      	ldr	r3, [r4, #8]
 8007a76:	1b9b      	subs	r3, r3, r6
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	4433      	add	r3, r6
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	2000      	movs	r0, #0
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	462a      	mov	r2, r5
 8007a88:	f000 fad2 	bl	8008030 <_realloc_r>
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d1e0      	bne.n	8007a54 <__ssputs_r+0x5c>
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7ff feb7 	bl	8007808 <_free_r>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	f8ca 3000 	str.w	r3, [sl]
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aac:	e7e9      	b.n	8007a82 <__ssputs_r+0x8a>
	...

08007ab0 <_svfiprintf_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	4698      	mov	r8, r3
 8007ab6:	898b      	ldrh	r3, [r1, #12]
 8007ab8:	061b      	lsls	r3, r3, #24
 8007aba:	b09d      	sub	sp, #116	@ 0x74
 8007abc:	4607      	mov	r7, r0
 8007abe:	460d      	mov	r5, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	d510      	bpl.n	8007ae6 <_svfiprintf_r+0x36>
 8007ac4:	690b      	ldr	r3, [r1, #16]
 8007ac6:	b973      	cbnz	r3, 8007ae6 <_svfiprintf_r+0x36>
 8007ac8:	2140      	movs	r1, #64	@ 0x40
 8007aca:	f7ff ff09 	bl	80078e0 <_malloc_r>
 8007ace:	6028      	str	r0, [r5, #0]
 8007ad0:	6128      	str	r0, [r5, #16]
 8007ad2:	b930      	cbnz	r0, 8007ae2 <_svfiprintf_r+0x32>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	b01d      	add	sp, #116	@ 0x74
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	2340      	movs	r3, #64	@ 0x40
 8007ae4:	616b      	str	r3, [r5, #20]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aea:	2320      	movs	r3, #32
 8007aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af4:	2330      	movs	r3, #48	@ 0x30
 8007af6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c94 <_svfiprintf_r+0x1e4>
 8007afa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007afe:	f04f 0901 	mov.w	r9, #1
 8007b02:	4623      	mov	r3, r4
 8007b04:	469a      	mov	sl, r3
 8007b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b0a:	b10a      	cbz	r2, 8007b10 <_svfiprintf_r+0x60>
 8007b0c:	2a25      	cmp	r2, #37	@ 0x25
 8007b0e:	d1f9      	bne.n	8007b04 <_svfiprintf_r+0x54>
 8007b10:	ebba 0b04 	subs.w	fp, sl, r4
 8007b14:	d00b      	beq.n	8007b2e <_svfiprintf_r+0x7e>
 8007b16:	465b      	mov	r3, fp
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff ff6b 	bl	80079f8 <__ssputs_r>
 8007b22:	3001      	adds	r0, #1
 8007b24:	f000 80a7 	beq.w	8007c76 <_svfiprintf_r+0x1c6>
 8007b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b2a:	445a      	add	r2, fp
 8007b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 809f 	beq.w	8007c76 <_svfiprintf_r+0x1c6>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b42:	f10a 0a01 	add.w	sl, sl, #1
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	9307      	str	r3, [sp, #28]
 8007b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b50:	4654      	mov	r4, sl
 8007b52:	2205      	movs	r2, #5
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	484e      	ldr	r0, [pc, #312]	@ (8007c94 <_svfiprintf_r+0x1e4>)
 8007b5a:	f7f8 fb71 	bl	8000240 <memchr>
 8007b5e:	9a04      	ldr	r2, [sp, #16]
 8007b60:	b9d8      	cbnz	r0, 8007b9a <_svfiprintf_r+0xea>
 8007b62:	06d0      	lsls	r0, r2, #27
 8007b64:	bf44      	itt	mi
 8007b66:	2320      	movmi	r3, #32
 8007b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b6c:	0711      	lsls	r1, r2, #28
 8007b6e:	bf44      	itt	mi
 8007b70:	232b      	movmi	r3, #43	@ 0x2b
 8007b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b76:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b7c:	d015      	beq.n	8007baa <_svfiprintf_r+0xfa>
 8007b7e:	9a07      	ldr	r2, [sp, #28]
 8007b80:	4654      	mov	r4, sl
 8007b82:	2000      	movs	r0, #0
 8007b84:	f04f 0c0a 	mov.w	ip, #10
 8007b88:	4621      	mov	r1, r4
 8007b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b8e:	3b30      	subs	r3, #48	@ 0x30
 8007b90:	2b09      	cmp	r3, #9
 8007b92:	d94b      	bls.n	8007c2c <_svfiprintf_r+0x17c>
 8007b94:	b1b0      	cbz	r0, 8007bc4 <_svfiprintf_r+0x114>
 8007b96:	9207      	str	r2, [sp, #28]
 8007b98:	e014      	b.n	8007bc4 <_svfiprintf_r+0x114>
 8007b9a:	eba0 0308 	sub.w	r3, r0, r8
 8007b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	9304      	str	r3, [sp, #16]
 8007ba6:	46a2      	mov	sl, r4
 8007ba8:	e7d2      	b.n	8007b50 <_svfiprintf_r+0xa0>
 8007baa:	9b03      	ldr	r3, [sp, #12]
 8007bac:	1d19      	adds	r1, r3, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	9103      	str	r1, [sp, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfbb      	ittet	lt
 8007bb6:	425b      	neglt	r3, r3
 8007bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bbc:	9307      	strge	r3, [sp, #28]
 8007bbe:	9307      	strlt	r3, [sp, #28]
 8007bc0:	bfb8      	it	lt
 8007bc2:	9204      	strlt	r2, [sp, #16]
 8007bc4:	7823      	ldrb	r3, [r4, #0]
 8007bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bc8:	d10a      	bne.n	8007be0 <_svfiprintf_r+0x130>
 8007bca:	7863      	ldrb	r3, [r4, #1]
 8007bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bce:	d132      	bne.n	8007c36 <_svfiprintf_r+0x186>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	9203      	str	r2, [sp, #12]
 8007bd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bdc:	3402      	adds	r4, #2
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ca4 <_svfiprintf_r+0x1f4>
 8007be4:	7821      	ldrb	r1, [r4, #0]
 8007be6:	2203      	movs	r2, #3
 8007be8:	4650      	mov	r0, sl
 8007bea:	f7f8 fb29 	bl	8000240 <memchr>
 8007bee:	b138      	cbz	r0, 8007c00 <_svfiprintf_r+0x150>
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	eba0 000a 	sub.w	r0, r0, sl
 8007bf6:	2240      	movs	r2, #64	@ 0x40
 8007bf8:	4082      	lsls	r2, r0
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	3401      	adds	r4, #1
 8007bfe:	9304      	str	r3, [sp, #16]
 8007c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c04:	4824      	ldr	r0, [pc, #144]	@ (8007c98 <_svfiprintf_r+0x1e8>)
 8007c06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c0a:	2206      	movs	r2, #6
 8007c0c:	f7f8 fb18 	bl	8000240 <memchr>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d036      	beq.n	8007c82 <_svfiprintf_r+0x1d2>
 8007c14:	4b21      	ldr	r3, [pc, #132]	@ (8007c9c <_svfiprintf_r+0x1ec>)
 8007c16:	bb1b      	cbnz	r3, 8007c60 <_svfiprintf_r+0x1b0>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	3307      	adds	r3, #7
 8007c1c:	f023 0307 	bic.w	r3, r3, #7
 8007c20:	3308      	adds	r3, #8
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c26:	4433      	add	r3, r6
 8007c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c2a:	e76a      	b.n	8007b02 <_svfiprintf_r+0x52>
 8007c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c30:	460c      	mov	r4, r1
 8007c32:	2001      	movs	r0, #1
 8007c34:	e7a8      	b.n	8007b88 <_svfiprintf_r+0xd8>
 8007c36:	2300      	movs	r3, #0
 8007c38:	3401      	adds	r4, #1
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f04f 0c0a 	mov.w	ip, #10
 8007c42:	4620      	mov	r0, r4
 8007c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c48:	3a30      	subs	r2, #48	@ 0x30
 8007c4a:	2a09      	cmp	r2, #9
 8007c4c:	d903      	bls.n	8007c56 <_svfiprintf_r+0x1a6>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0c6      	beq.n	8007be0 <_svfiprintf_r+0x130>
 8007c52:	9105      	str	r1, [sp, #20]
 8007c54:	e7c4      	b.n	8007be0 <_svfiprintf_r+0x130>
 8007c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e7f0      	b.n	8007c42 <_svfiprintf_r+0x192>
 8007c60:	ab03      	add	r3, sp, #12
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	462a      	mov	r2, r5
 8007c66:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca0 <_svfiprintf_r+0x1f0>)
 8007c68:	a904      	add	r1, sp, #16
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f3af 8000 	nop.w
 8007c70:	1c42      	adds	r2, r0, #1
 8007c72:	4606      	mov	r6, r0
 8007c74:	d1d6      	bne.n	8007c24 <_svfiprintf_r+0x174>
 8007c76:	89ab      	ldrh	r3, [r5, #12]
 8007c78:	065b      	lsls	r3, r3, #25
 8007c7a:	f53f af2d 	bmi.w	8007ad8 <_svfiprintf_r+0x28>
 8007c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c80:	e72c      	b.n	8007adc <_svfiprintf_r+0x2c>
 8007c82:	ab03      	add	r3, sp, #12
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	462a      	mov	r2, r5
 8007c88:	4b05      	ldr	r3, [pc, #20]	@ (8007ca0 <_svfiprintf_r+0x1f0>)
 8007c8a:	a904      	add	r1, sp, #16
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f000 f879 	bl	8007d84 <_printf_i>
 8007c92:	e7ed      	b.n	8007c70 <_svfiprintf_r+0x1c0>
 8007c94:	08008144 	.word	0x08008144
 8007c98:	0800814e 	.word	0x0800814e
 8007c9c:	00000000 	.word	0x00000000
 8007ca0:	080079f9 	.word	0x080079f9
 8007ca4:	0800814a 	.word	0x0800814a

08007ca8 <_printf_common>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	4616      	mov	r6, r2
 8007cae:	4698      	mov	r8, r3
 8007cb0:	688a      	ldr	r2, [r1, #8]
 8007cb2:	690b      	ldr	r3, [r1, #16]
 8007cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	bfb8      	it	lt
 8007cbc:	4613      	movlt	r3, r2
 8007cbe:	6033      	str	r3, [r6, #0]
 8007cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	b10a      	cbz	r2, 8007cce <_printf_common+0x26>
 8007cca:	3301      	adds	r3, #1
 8007ccc:	6033      	str	r3, [r6, #0]
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	0699      	lsls	r1, r3, #26
 8007cd2:	bf42      	ittt	mi
 8007cd4:	6833      	ldrmi	r3, [r6, #0]
 8007cd6:	3302      	addmi	r3, #2
 8007cd8:	6033      	strmi	r3, [r6, #0]
 8007cda:	6825      	ldr	r5, [r4, #0]
 8007cdc:	f015 0506 	ands.w	r5, r5, #6
 8007ce0:	d106      	bne.n	8007cf0 <_printf_common+0x48>
 8007ce2:	f104 0a19 	add.w	sl, r4, #25
 8007ce6:	68e3      	ldr	r3, [r4, #12]
 8007ce8:	6832      	ldr	r2, [r6, #0]
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	42ab      	cmp	r3, r5
 8007cee:	dc26      	bgt.n	8007d3e <_printf_common+0x96>
 8007cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	3b00      	subs	r3, #0
 8007cf8:	bf18      	it	ne
 8007cfa:	2301      	movne	r3, #1
 8007cfc:	0692      	lsls	r2, r2, #26
 8007cfe:	d42b      	bmi.n	8007d58 <_printf_common+0xb0>
 8007d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d04:	4641      	mov	r1, r8
 8007d06:	4638      	mov	r0, r7
 8007d08:	47c8      	blx	r9
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d01e      	beq.n	8007d4c <_printf_common+0xa4>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	f003 0306 	and.w	r3, r3, #6
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	bf02      	ittt	eq
 8007d1a:	68e5      	ldreq	r5, [r4, #12]
 8007d1c:	6833      	ldreq	r3, [r6, #0]
 8007d1e:	1aed      	subeq	r5, r5, r3
 8007d20:	68a3      	ldr	r3, [r4, #8]
 8007d22:	bf0c      	ite	eq
 8007d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d28:	2500      	movne	r5, #0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bfc4      	itt	gt
 8007d2e:	1a9b      	subgt	r3, r3, r2
 8007d30:	18ed      	addgt	r5, r5, r3
 8007d32:	2600      	movs	r6, #0
 8007d34:	341a      	adds	r4, #26
 8007d36:	42b5      	cmp	r5, r6
 8007d38:	d11a      	bne.n	8007d70 <_printf_common+0xc8>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e008      	b.n	8007d50 <_printf_common+0xa8>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4652      	mov	r2, sl
 8007d42:	4641      	mov	r1, r8
 8007d44:	4638      	mov	r0, r7
 8007d46:	47c8      	blx	r9
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d103      	bne.n	8007d54 <_printf_common+0xac>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	3501      	adds	r5, #1
 8007d56:	e7c6      	b.n	8007ce6 <_printf_common+0x3e>
 8007d58:	18e1      	adds	r1, r4, r3
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	2030      	movs	r0, #48	@ 0x30
 8007d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d62:	4422      	add	r2, r4
 8007d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	e7c7      	b.n	8007d00 <_printf_common+0x58>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4622      	mov	r2, r4
 8007d74:	4641      	mov	r1, r8
 8007d76:	4638      	mov	r0, r7
 8007d78:	47c8      	blx	r9
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0e6      	beq.n	8007d4c <_printf_common+0xa4>
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7d9      	b.n	8007d36 <_printf_common+0x8e>
	...

08007d84 <_printf_i>:
 8007d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	7e0f      	ldrb	r7, [r1, #24]
 8007d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d8c:	2f78      	cmp	r7, #120	@ 0x78
 8007d8e:	4691      	mov	r9, r2
 8007d90:	4680      	mov	r8, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	469a      	mov	sl, r3
 8007d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d9a:	d807      	bhi.n	8007dac <_printf_i+0x28>
 8007d9c:	2f62      	cmp	r7, #98	@ 0x62
 8007d9e:	d80a      	bhi.n	8007db6 <_printf_i+0x32>
 8007da0:	2f00      	cmp	r7, #0
 8007da2:	f000 80d1 	beq.w	8007f48 <_printf_i+0x1c4>
 8007da6:	2f58      	cmp	r7, #88	@ 0x58
 8007da8:	f000 80b8 	beq.w	8007f1c <_printf_i+0x198>
 8007dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db4:	e03a      	b.n	8007e2c <_printf_i+0xa8>
 8007db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dba:	2b15      	cmp	r3, #21
 8007dbc:	d8f6      	bhi.n	8007dac <_printf_i+0x28>
 8007dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc4 <_printf_i+0x40>)
 8007dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc4:	08007e1d 	.word	0x08007e1d
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007dad 	.word	0x08007dad
 8007dd0:	08007dad 	.word	0x08007dad
 8007dd4:	08007dad 	.word	0x08007dad
 8007dd8:	08007dad 	.word	0x08007dad
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007dad 	.word	0x08007dad
 8007de4:	08007dad 	.word	0x08007dad
 8007de8:	08007dad 	.word	0x08007dad
 8007dec:	08007dad 	.word	0x08007dad
 8007df0:	08007f2f 	.word	0x08007f2f
 8007df4:	08007e5b 	.word	0x08007e5b
 8007df8:	08007ee9 	.word	0x08007ee9
 8007dfc:	08007dad 	.word	0x08007dad
 8007e00:	08007dad 	.word	0x08007dad
 8007e04:	08007f51 	.word	0x08007f51
 8007e08:	08007dad 	.word	0x08007dad
 8007e0c:	08007e5b 	.word	0x08007e5b
 8007e10:	08007dad 	.word	0x08007dad
 8007e14:	08007dad 	.word	0x08007dad
 8007e18:	08007ef1 	.word	0x08007ef1
 8007e1c:	6833      	ldr	r3, [r6, #0]
 8007e1e:	1d1a      	adds	r2, r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6032      	str	r2, [r6, #0]
 8007e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e09c      	b.n	8007f6a <_printf_i+0x1e6>
 8007e30:	6833      	ldr	r3, [r6, #0]
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	6031      	str	r1, [r6, #0]
 8007e38:	0606      	lsls	r6, r0, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0xbc>
 8007e3c:	681d      	ldr	r5, [r3, #0]
 8007e3e:	e003      	b.n	8007e48 <_printf_i+0xc4>
 8007e40:	0645      	lsls	r5, r0, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0xb8>
 8007e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e48:	2d00      	cmp	r5, #0
 8007e4a:	da03      	bge.n	8007e54 <_printf_i+0xd0>
 8007e4c:	232d      	movs	r3, #45	@ 0x2d
 8007e4e:	426d      	negs	r5, r5
 8007e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e54:	4858      	ldr	r0, [pc, #352]	@ (8007fb8 <_printf_i+0x234>)
 8007e56:	230a      	movs	r3, #10
 8007e58:	e011      	b.n	8007e7e <_printf_i+0xfa>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	6833      	ldr	r3, [r6, #0]
 8007e5e:	0608      	lsls	r0, r1, #24
 8007e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e64:	d402      	bmi.n	8007e6c <_printf_i+0xe8>
 8007e66:	0649      	lsls	r1, r1, #25
 8007e68:	bf48      	it	mi
 8007e6a:	b2ad      	uxthmi	r5, r5
 8007e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e6e:	4852      	ldr	r0, [pc, #328]	@ (8007fb8 <_printf_i+0x234>)
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	bf14      	ite	ne
 8007e74:	230a      	movne	r3, #10
 8007e76:	2308      	moveq	r3, #8
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e7e:	6866      	ldr	r6, [r4, #4]
 8007e80:	60a6      	str	r6, [r4, #8]
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	db05      	blt.n	8007e92 <_printf_i+0x10e>
 8007e86:	6821      	ldr	r1, [r4, #0]
 8007e88:	432e      	orrs	r6, r5
 8007e8a:	f021 0104 	bic.w	r1, r1, #4
 8007e8e:	6021      	str	r1, [r4, #0]
 8007e90:	d04b      	beq.n	8007f2a <_printf_i+0x1a6>
 8007e92:	4616      	mov	r6, r2
 8007e94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e98:	fb03 5711 	mls	r7, r3, r1, r5
 8007e9c:	5dc7      	ldrb	r7, [r0, r7]
 8007e9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea2:	462f      	mov	r7, r5
 8007ea4:	42bb      	cmp	r3, r7
 8007ea6:	460d      	mov	r5, r1
 8007ea8:	d9f4      	bls.n	8007e94 <_printf_i+0x110>
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d10b      	bne.n	8007ec6 <_printf_i+0x142>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	07df      	lsls	r7, r3, #31
 8007eb2:	d508      	bpl.n	8007ec6 <_printf_i+0x142>
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	6861      	ldr	r1, [r4, #4]
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	bfde      	ittt	le
 8007ebc:	2330      	movle	r3, #48	@ 0x30
 8007ebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ec6:	1b92      	subs	r2, r2, r6
 8007ec8:	6122      	str	r2, [r4, #16]
 8007eca:	f8cd a000 	str.w	sl, [sp]
 8007ece:	464b      	mov	r3, r9
 8007ed0:	aa03      	add	r2, sp, #12
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	f7ff fee7 	bl	8007ca8 <_printf_common>
 8007eda:	3001      	adds	r0, #1
 8007edc:	d14a      	bne.n	8007f74 <_printf_i+0x1f0>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	b004      	add	sp, #16
 8007ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	f043 0320 	orr.w	r3, r3, #32
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	4832      	ldr	r0, [pc, #200]	@ (8007fbc <_printf_i+0x238>)
 8007ef2:	2778      	movs	r7, #120	@ 0x78
 8007ef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	061f      	lsls	r7, r3, #24
 8007efe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f02:	d402      	bmi.n	8007f0a <_printf_i+0x186>
 8007f04:	065f      	lsls	r7, r3, #25
 8007f06:	bf48      	it	mi
 8007f08:	b2ad      	uxthmi	r5, r5
 8007f0a:	6031      	str	r1, [r6, #0]
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	bf44      	itt	mi
 8007f10:	f043 0320 	orrmi.w	r3, r3, #32
 8007f14:	6023      	strmi	r3, [r4, #0]
 8007f16:	b11d      	cbz	r5, 8007f20 <_printf_i+0x19c>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	e7ad      	b.n	8007e78 <_printf_i+0xf4>
 8007f1c:	4826      	ldr	r0, [pc, #152]	@ (8007fb8 <_printf_i+0x234>)
 8007f1e:	e7e9      	b.n	8007ef4 <_printf_i+0x170>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	f023 0320 	bic.w	r3, r3, #32
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	e7f6      	b.n	8007f18 <_printf_i+0x194>
 8007f2a:	4616      	mov	r6, r2
 8007f2c:	e7bd      	b.n	8007eaa <_printf_i+0x126>
 8007f2e:	6833      	ldr	r3, [r6, #0]
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	6961      	ldr	r1, [r4, #20]
 8007f34:	1d18      	adds	r0, r3, #4
 8007f36:	6030      	str	r0, [r6, #0]
 8007f38:	062e      	lsls	r6, r5, #24
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	d501      	bpl.n	8007f42 <_printf_i+0x1be>
 8007f3e:	6019      	str	r1, [r3, #0]
 8007f40:	e002      	b.n	8007f48 <_printf_i+0x1c4>
 8007f42:	0668      	lsls	r0, r5, #25
 8007f44:	d5fb      	bpl.n	8007f3e <_printf_i+0x1ba>
 8007f46:	8019      	strh	r1, [r3, #0]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	e7bc      	b.n	8007eca <_printf_i+0x146>
 8007f50:	6833      	ldr	r3, [r6, #0]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	6032      	str	r2, [r6, #0]
 8007f56:	681e      	ldr	r6, [r3, #0]
 8007f58:	6862      	ldr	r2, [r4, #4]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7f8 f96f 	bl	8000240 <memchr>
 8007f62:	b108      	cbz	r0, 8007f68 <_printf_i+0x1e4>
 8007f64:	1b80      	subs	r0, r0, r6
 8007f66:	6060      	str	r0, [r4, #4]
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	6123      	str	r3, [r4, #16]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f72:	e7aa      	b.n	8007eca <_printf_i+0x146>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	4632      	mov	r2, r6
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	47d0      	blx	sl
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d0ad      	beq.n	8007ede <_printf_i+0x15a>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	079b      	lsls	r3, r3, #30
 8007f86:	d413      	bmi.n	8007fb0 <_printf_i+0x22c>
 8007f88:	68e0      	ldr	r0, [r4, #12]
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	4298      	cmp	r0, r3
 8007f8e:	bfb8      	it	lt
 8007f90:	4618      	movlt	r0, r3
 8007f92:	e7a6      	b.n	8007ee2 <_printf_i+0x15e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	4632      	mov	r2, r6
 8007f98:	4649      	mov	r1, r9
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	47d0      	blx	sl
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d09d      	beq.n	8007ede <_printf_i+0x15a>
 8007fa2:	3501      	adds	r5, #1
 8007fa4:	68e3      	ldr	r3, [r4, #12]
 8007fa6:	9903      	ldr	r1, [sp, #12]
 8007fa8:	1a5b      	subs	r3, r3, r1
 8007faa:	42ab      	cmp	r3, r5
 8007fac:	dcf2      	bgt.n	8007f94 <_printf_i+0x210>
 8007fae:	e7eb      	b.n	8007f88 <_printf_i+0x204>
 8007fb0:	2500      	movs	r5, #0
 8007fb2:	f104 0619 	add.w	r6, r4, #25
 8007fb6:	e7f5      	b.n	8007fa4 <_printf_i+0x220>
 8007fb8:	08008155 	.word	0x08008155
 8007fbc:	08008166 	.word	0x08008166

08007fc0 <memmove>:
 8007fc0:	4288      	cmp	r0, r1
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	eb01 0402 	add.w	r4, r1, r2
 8007fc8:	d902      	bls.n	8007fd0 <memmove+0x10>
 8007fca:	4284      	cmp	r4, r0
 8007fcc:	4623      	mov	r3, r4
 8007fce:	d807      	bhi.n	8007fe0 <memmove+0x20>
 8007fd0:	1e43      	subs	r3, r0, #1
 8007fd2:	42a1      	cmp	r1, r4
 8007fd4:	d008      	beq.n	8007fe8 <memmove+0x28>
 8007fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fde:	e7f8      	b.n	8007fd2 <memmove+0x12>
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	d100      	bne.n	8007fea <memmove+0x2a>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ff2:	e7f7      	b.n	8007fe4 <memmove+0x24>

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	@ (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f9 fb28 	bl	8001654 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	20000c7c 	.word	0x20000c7c

08008014 <memcpy>:
 8008014:	440a      	add	r2, r1
 8008016:	4291      	cmp	r1, r2
 8008018:	f100 33ff 	add.w	r3, r0, #4294967295
 800801c:	d100      	bne.n	8008020 <memcpy+0xc>
 800801e:	4770      	bx	lr
 8008020:	b510      	push	{r4, lr}
 8008022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	4291      	cmp	r1, r2
 800802c:	d1f9      	bne.n	8008022 <memcpy+0xe>
 800802e:	bd10      	pop	{r4, pc}

08008030 <_realloc_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4607      	mov	r7, r0
 8008036:	4614      	mov	r4, r2
 8008038:	460d      	mov	r5, r1
 800803a:	b921      	cbnz	r1, 8008046 <_realloc_r+0x16>
 800803c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	4611      	mov	r1, r2
 8008042:	f7ff bc4d 	b.w	80078e0 <_malloc_r>
 8008046:	b92a      	cbnz	r2, 8008054 <_realloc_r+0x24>
 8008048:	f7ff fbde 	bl	8007808 <_free_r>
 800804c:	4625      	mov	r5, r4
 800804e:	4628      	mov	r0, r5
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008054:	f000 f81a 	bl	800808c <_malloc_usable_size_r>
 8008058:	4284      	cmp	r4, r0
 800805a:	4606      	mov	r6, r0
 800805c:	d802      	bhi.n	8008064 <_realloc_r+0x34>
 800805e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008062:	d8f4      	bhi.n	800804e <_realloc_r+0x1e>
 8008064:	4621      	mov	r1, r4
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff fc3a 	bl	80078e0 <_malloc_r>
 800806c:	4680      	mov	r8, r0
 800806e:	b908      	cbnz	r0, 8008074 <_realloc_r+0x44>
 8008070:	4645      	mov	r5, r8
 8008072:	e7ec      	b.n	800804e <_realloc_r+0x1e>
 8008074:	42b4      	cmp	r4, r6
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	bf28      	it	cs
 800807c:	4632      	movcs	r2, r6
 800807e:	f7ff ffc9 	bl	8008014 <memcpy>
 8008082:	4629      	mov	r1, r5
 8008084:	4638      	mov	r0, r7
 8008086:	f7ff fbbf 	bl	8007808 <_free_r>
 800808a:	e7f1      	b.n	8008070 <_realloc_r+0x40>

0800808c <_malloc_usable_size_r>:
 800808c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008090:	1f18      	subs	r0, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfbc      	itt	lt
 8008096:	580b      	ldrlt	r3, [r1, r0]
 8008098:	18c0      	addlt	r0, r0, r3
 800809a:	4770      	bx	lr

0800809c <_init>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr

080080a8 <_fini>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	bf00      	nop
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr
